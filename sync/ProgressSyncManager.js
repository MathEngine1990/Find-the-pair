/**
 * ProgressSyncManager.js - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
 * –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ VK Mini Apps
 */

class ProgressSyncManager {
  constructor() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
    if (ProgressSyncManager.instance) {
      console.log('üì¶ Returning existing ProgressSyncManager instance');
      return ProgressSyncManager.instance;
    }
    
    this.version = '1.0';
    this.localKey = 'findpair_progress';
    this.vkKey = 'findpair_progress';
    this.achievementsKey = 'findpair_achievements';
    
    this.isSyncing = false;
    this.isInitialized = false;
    this.lastSyncTime = 0;
    this.syncQueue = [];
    this.autoSyncInterval = null;
    
    this.settings = {
      syncInterval: 30000,
      retryAttempts: 3,
      retryDelay: 1000,
      debounceDelay: 2000,
      compressionThreshold: 1024
    };
    
    this.onSyncStart = null;
    this.onSyncComplete = null;
    this.onSyncError = null;
    this.onProgressUpdate = null;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    ProgressSyncManager.instance = this;
    
    // –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
    console.log('üÜï ProgressSyncManager singleton created');
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    setTimeout(() => this.init().catch(console.error), 0);
  }

  async init() {
    if (this.isInitialized) {
      console.log('‚ö†Ô∏è ProgressSyncManager already initialized');
      return;
    }
    
    console.log('üîÑ ProgressSyncManager initializing...');
    this.isInitialized = true;
    
    try {
      await this.loadInitialData();
      this.startAutoSync();
      this.subscribeToVKEvents();
      console.log('‚úÖ ProgressSyncManager initialized successfully');
    } catch (error) {
      console.error('‚ùå ProgressSyncManager initialization failed:', error);
      this.isInitialized = false;
      throw error;
    }
  }

  async loadInitialData() {
  try {
    const localData = this.loadFromLocal();
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å VK –ø–µ—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
    if (this.isVKAvailable() && window.vkBridge) {
      try {
        const synced = await this.performSync();
        if (synced) {
          console.log('‚úÖ Initial sync completed');
          return;
        }
      } catch (vkError) {
        console.log('üì± VK sync not available, using local data');
      }
    }
    
    console.log('üì± Using local data only');
    
  } catch (error) {
    console.error('‚ùå Failed to load initial data:', error);
    // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º handleSyncError –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
  }
}

  async performSync() {
    if (this.isSyncing) {
      console.log('‚è≥ Sync already in progress');
      return false;
    }

    this.isSyncing = true;
    
    if (this.onSyncStart) {
      this.onSyncStart();
    }

    try {
      console.log('üîÑ Starting sync...');
      
      const vkData = await this.loadFromVK();
      const localData = this.loadFromLocal();
      
      const mergedData = this.mergeProgressData(localData, vkData);
      
      await this.saveToVK(mergedData);
      this.saveToLocal(mergedData);
      
      this.lastSyncTime = Date.now();
      
      console.log('‚úÖ Sync completed successfully');
      
      if (this.onSyncComplete) {
        this.onSyncComplete(mergedData);
      }
      
      return true;
      
    } catch (error) {
      console.error('‚ùå Sync failed:', error);
      this.handleSyncError(error);
      return false;
      
    } finally {
      this.isSyncing = false;
    }
  }

  async loadFromVK() {
    if (!this.isVKAvailable()) {
      throw new Error('VK Storage not available');
    }

    for (let attempt = 1; attempt <= this.settings.retryAttempts; attempt++) {
      try {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥ VK Bridge
        const result = await this.safeVKCall('VKWebAppStorageGet', {
          keys: [this.vkKey]
        });
        
        if (result?.keys?.length > 0) {
          const rawData = result.keys[0].value;
          const parsedData = rawData ? JSON.parse(rawData) : this.getDefaultProgressData();
          return parsedData;
        }
        
        return this.getDefaultProgressData();
        
      } catch (error) {
        console.warn(`VK Storage load attempt ${attempt} failed:`, error);
        
        if (attempt === this.settings.retryAttempts) {
          throw error;
        }
        
        await this.delay(this.settings.retryDelay * attempt);
      }
    }
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ VK Bridge
  async safeVKCall(method, params = {}) {
    if (!window.vkBridge) {
      throw new Error('VK Bridge not available');
    }
    
    try {
      return await window.vkBridge.send(method, params);
    } catch (error) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ VK
      if (error.error_data?.error_code === 6) {
        // –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        await this.delay(1000);
        return await window.vkBridge.send(method, params);
      }
      throw error;
    }
  }

  saveToLocal(data) {
    try {
      const compressed = this.compressData(data);
      localStorage.setItem(this.localKey, compressed);
      console.log('üíæ Saved to localStorage');
    } catch (error) {
      console.error('‚ùå Failed to save to localStorage:', error);
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏
      if (error.name === 'QuotaExceededError') {
        this.cleanupLocalStorage();
        try {
          localStorage.setItem(this.localKey, compressed);
        } catch (retryError) {
          throw retryError;
        }
      } else {
        throw error;
      }
    }
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –û—á–∏—Å—Ç–∫–∞ localStorage –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏
  cleanupLocalStorage() {
    const keysToRemove = [];
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && key.startsWith('findpair_') && !key.includes('progress')) {
        keysToRemove.push(key);
      }
    }
    keysToRemove.forEach(key => localStorage.removeItem(key));
    console.log(`üßπ Cleaned up ${keysToRemove.length} old localStorage items`);
  }

  loadFromLocal() {
    try {
      const compressed = localStorage.getItem(this.localKey);
      if (!compressed) return this.getDefaultProgressData();
      
      const data = this.decompressData(compressed);
      return this.safelyMigrateData(data);
    } catch (error) {
      console.error('‚ùå Failed to load from localStorage:', error);
      return this.getDefaultProgressData();
    }
  }

  async saveToVK(progressData) {
    if (!this.isVKAvailable()) {
      console.warn('VK Storage not available');
      return false;
    }

    for (let attempt = 1; attempt <= this.settings.retryAttempts; attempt++) {
      try {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥
        await this.safeVKCall('VKWebAppStorageSet', {
          key: this.vkKey,
          value: JSON.stringify(progressData)
        });
        
        console.log('‚úÖ Saved to VK Storage');
        return true;
        
      } catch (error) {
        console.warn(`VK Storage save attempt ${attempt} failed:`, error);
        
        if (attempt === this.settings.retryAttempts) {
          throw error;
        }
        
        await this.delay(this.settings.retryDelay * attempt);
      }
    }
    
    return false;
  }

  compressData(data) {
    try {
      const compressed = JSON.stringify(data);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
      if (compressed.length > this.settings.compressionThreshold) {
        console.log(`üì¶ Data size: ${compressed.length} bytes`);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞
        if (compressed.length > 10000) {
          data = this.optimizeData(data);
          return JSON.stringify(data);
        }
      }
      
      return compressed;
    } catch (error) {
      console.error('Failed to compress data:', error);
      throw error;
    }
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  optimizeData(data) {
    const optimized = { ...data };
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —É—Ä–æ–≤–Ω–µ–π (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
    if (optimized.levels && Object.keys(optimized.levels).length > 50) {
      const sortedLevels = Object.entries(optimized.levels)
        .sort((a, b) => (b[1].lastPlayed || 0) - (a[1].lastPlayed || 0))
        .slice(0, 50);
      optimized.levels = Object.fromEntries(sortedLevels);
    }
    
    return optimized;
  }

  decompressData(compressed) {
    try {
      return JSON.parse(compressed);
    } catch (error) {
      console.error('Decompression failed:', error);
      throw error;
    }
  }

  safelyMigrateData(data) {
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º —Å –æ–±—ä–µ–∫—Ç–æ–º
    if (!data || typeof data !== 'object' || Array.isArray(data)) {
      console.warn('‚ö†Ô∏è Invalid data for migration');
      return this.getDefaultProgressData();
    }
    
    // –í–°–ï–ì–î–ê —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
    const migrated = {
      version: this.version,
      timestamp: data.timestamp || Date.now(),
      deviceId: data.deviceId || this.getDeviceId(),
      lastModified: Date.now(),
      levels: data.levels || {},
      achievements: data.achievements || {},
      stats: data.stats || {
        gamesPlayed: 0,
        totalTime: 0,
        totalErrors: 0,
        bestTime: null,
        lastPlayed: 0
      }
    };
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    if (!data.version || data.version !== this.version) {
      console.log(`üîÑ Data migrated from v${data.version || 'unknown'} to v${this.version}`);
    }
    
    return migrated;
  }

  mergeProgressData(localData, vkData) {
    if (!localData && !vkData) {
      return this.getDefaultProgressData();
    }
    
    if (!vkData) return localData;
    if (!localData) return vkData;

    console.log('üîÄ Merging progress data...');
    
    const merged = {
      version: this.version,
      timestamp: Math.max(localData.timestamp || 0, vkData.timestamp || 0),
      deviceId: localData.deviceId || this.getDeviceId(),
      lastModified: Date.now(),
      levels: {},
      achievements: {},
      stats: {}
    };

    // Merge levels - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ
    const allLevels = new Set([
      ...Object.keys(localData.levels || {}),
      ...Object.keys(vkData.levels || {})
    ]);

    for (const levelIndex of allLevels) {
      const local = localData.levels?.[levelIndex];
      const vk = vkData.levels?.[levelIndex];
      
      const mergedLevel = this.mergeLevelData(local, vk);
      if (mergedLevel) {
        merged.levels[levelIndex] = mergedLevel;
      }
    }

    // Merge achievements - –±–µ—Ä—ë–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
    merged.achievements = {
      ...(vkData.achievements || {}),
      ...(localData.achievements || {})
    };

    // Merge stats
    merged.stats = this.mergeStats(localData.stats, vkData.stats);

    console.log('‚úÖ Merge completed');
    return merged;
  }

  mergeLevelData(local, vk) {
    if (!local && !vk) return null;
    if (!vk) return local;
    if (!local) return vk;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω—è
    const merged = {
      stars: Math.max(local.stars || 0, vk.stars || 0),
      bestTime: Math.min(
        local.bestTime || Infinity,
        vk.bestTime || Infinity
      ) === Infinity ? null : Math.min(
        local.bestTime || Infinity,
        vk.bestTime || Infinity
      ),
      errors: Math.min(
        local.errors || Infinity,
        vk.errors || Infinity
      ) === Infinity ? null : Math.min(
        local.errors || Infinity,
        vk.errors || Infinity
      ),
      attempts: Math.max(local.attempts || 0, vk.attempts || 0),
      completed: local.completed || vk.completed || false,
      lastPlayed: Math.max(local.lastPlayed || 0, vk.lastPlayed || 0)
    };
    
    return merged;
  }

  mergeStats(localStats = {}, vkStats = {}) {
    return {
      gamesPlayed: Math.max(localStats.gamesPlayed || 0, vkStats.gamesPlayed || 0),
      totalTime: Math.max(localStats.totalTime || 0, vkStats.totalTime || 0),
      totalErrors: Math.max(localStats.totalErrors || 0, vkStats.totalErrors || 0),
      bestTime: Math.min(
        localStats.bestTime || Infinity,
        vkStats.bestTime || Infinity
      ) === Infinity ? null : Math.min(
        localStats.bestTime || Infinity,
        vkStats.bestTime || Infinity
      ),
      lastPlayed: Math.max(
        localStats.lastPlayed || 0,
        vkStats.lastPlayed || 0
      )
    };
  }

  async saveProgress(progressData, forceSync = false) {
    const timestamp = Date.now();
    
    const enrichedData = {
      ...progressData,
      version: this.version,
      timestamp,
      deviceId: this.getDeviceId(),
      lastModified: timestamp
    };

    if (!this.validateProgressData(enrichedData)) {
      throw new Error('Invalid progress data structure');
    }

    this.saveToLocal(enrichedData);

    if (forceSync) {
      await this.performSync();
    } else {
      this.queueSync();
    }

    if (this.onProgressUpdate) {
      this.onProgressUpdate(enrichedData);
    }

    return enrichedData;
  }

  async loadProgress() {
    try {
      if (this.isVKAvailable() && this.shouldSync()) {
        await this.performSync();
      }
      
      return this.loadFromLocal();
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Sync failed, using local data:', error);
      return this.loadFromLocal();
    }
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–≤–Ω—è
  async saveLevelProgress(levelIndex, levelData) {
    const progress = await this.loadProgress();
    
    progress.levels[levelIndex] = {
      ...progress.levels[levelIndex],
      ...levelData,
      lastPlayed: Date.now()
    };
    
    progress.stats.gamesPlayed = (progress.stats.gamesPlayed || 0) + 1;
    progress.stats.lastPlayed = Date.now();
    
    return await this.saveProgress(progress);
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  async saveAchievement(achievementId, data = {}) {
    const progress = await this.loadProgress();
    
    progress.achievements[achievementId] = {
      unlocked: true,
      unlockedAt: Date.now(),
      ...data
    };
    
    return await this.saveProgress(progress, true); // –§–æ—Ä—Å–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  }

  validateProgressData(data) {
    if (!data || typeof data !== 'object') return false;
    if (!data.version) return false;
    if (!data.timestamp) return false;
    
    return true;
  }

  getDefaultProgressData() {
    return {
      version: this.version,
      timestamp: Date.now(),
      deviceId: this.getDeviceId(),
      lastModified: Date.now(),
      levels: {},
      achievements: {},
      stats: {
        gamesPlayed: 0,
        totalTime: 0,
        totalErrors: 0,
        bestTime: null,
        lastPlayed: 0
      }
    };
  }

  getDeviceId() {
    let deviceId = localStorage.getItem('device_id');
    if (!deviceId) {
      deviceId = 'device_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
      localStorage.setItem('device_id', deviceId);
    }
    return deviceId;
  }

  queueSync() {
    clearTimeout(this.syncTimeout);
    this.syncTimeout = setTimeout(() => {
      if (this.isVKAvailable() && this.shouldSync()) {
        this.performSync();
      }
    }, this.settings.debounceDelay);
  }

  startAutoSync() {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    if (this.autoSyncInterval) {
      clearInterval(this.autoSyncInterval);
    }
    
    this.autoSyncInterval = setInterval(() => {
      if (this.isVKAvailable() && this.shouldSync()) {
        this.performSync();
      }
    }, this.settings.syncInterval);
    
    console.log('‚è∞ Auto-sync started');
  }

  stopAutoSync() {
    if (this.autoSyncInterval) {
      clearInterval(this.autoSyncInterval);
      this.autoSyncInterval = null;
      console.log('‚è∞ Auto-sync stopped');
    }
  }

  subscribeToVKEvents() {
    if (window.vkBridge && window.vkBridge.subscribe) {
      window.vkBridge.subscribe((e) => {
        const eventType = e.detail?.type;
        
        if (eventType === 'VKWebAppViewRestore') {
          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
          setTimeout(() => {
            if (this.shouldSync()) {
              this.performSync();
            }
          }, 1000);
        }
        
        // –î–û–ë–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
        if (eventType === 'VKWebAppUpdateConfig') {
          const scheme = e.detail?.data?.scheme;
          if (scheme) {
            document.body.setAttribute('data-scheme', scheme);
          }
        }
      });
    }
  }

  shouldSync() {
    const timeSinceLastSync = Date.now() - this.lastSyncTime;
    return timeSinceLastSync > 5000; // –ú–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è–º–∏
  }

  isVKAvailable() {
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    return !!(
      window.VK_BRIDGE_READY && 
      window.vkBridge &&
      typeof window.vkBridge.send === 'function'
    );
  }

  handleSyncError(error) {
    console.error('‚ùå Sync error:', error);
    
    if (error.stack) {
      console.error('Stack trace:', error.stack);
    }
    
    if (this.onSyncError) {
      this.onSyncError(error);
    }
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async forceSync() {
    console.log('üîÑ Force sync requested');
    return await this.performSync();
  }

  getSyncStatus() {
    return {
      isSyncing: this.isSyncing,
      lastSyncTime: this.lastSyncTime,
      isVKAvailable: this.isVKAvailable(),
      queueLength: this.syncQueue.length,
      isInitialized: this.isInitialized,
      timeSinceLastSync: Date.now() - this.lastSyncTime
    };
  }

  async clearAllData() {
    localStorage.removeItem(this.localKey);
    localStorage.removeItem('device_id');
    localStorage.removeItem(this.achievementsKey);
    
    if (this.isVKAvailable()) {
      try {
        await this.safeVKCall('VKWebAppStorageSet', {
          key: this.vkKey,
          value: '{}'
        });
      } catch (error) {
        console.warn('Failed to clear VK data:', error);
      }
    }
    
    console.log('üóëÔ∏è All data cleared');
  }

  destroy() {
    this.stopAutoSync();
    
    if (this.syncTimeout) {
      clearTimeout(this.syncTimeout);
    }
    
    this.onSyncStart = null;
    this.onSyncComplete = null;
    this.onSyncError = null;
    this.onProgressUpdate = null;
    
    ProgressSyncManager.instance = null;
    this.isInitialized = false;
    
    console.log('üóëÔ∏è ProgressSyncManager destroyed');
  }
}

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
ProgressSyncManager.instance = null;

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.ProgressSyncManager = ProgressSyncManager;

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (typeof window !== 'undefined') {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ VK
  const isVKEnvironment = window.location.search.includes('vk_') || 
                          window.location.hostname.includes('vk.com') ||
                          window.location.hostname.includes('vk-apps.com');
  
  if (isVKEnvironment && window.VK_BRIDGE_READY) {
    // –í VK –∏ Bridge –≥–æ—Ç–æ–≤ - —Å–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    window.progressSyncManager = new ProgressSyncManager();
  } else if (isVKEnvironment) {
    // –í VK, –Ω–æ Bridge –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ - –∂–¥–µ–º
    window.addEventListener('vk-bridge-ready', () => {
      if (!window.progressSyncManager) {
        window.progressSyncManager = new ProgressSyncManager();
      }
    });
  } else {
    // –ù–ï –≤ VK (GitHub Pages) - —Å–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑ VK —Ñ—É–Ω–∫—Ü–∏–π
    window.progressSyncManager = new ProgressSyncManager();
    // –û—Ç–∫–ª—é—á–∞–µ–º VK —Ñ—É–Ω–∫—Ü–∏–∏
    window.progressSyncManager.isVKAvailable = () => false;
    console.log('üì± Running outside VK - local storage only mode');
  }
}
