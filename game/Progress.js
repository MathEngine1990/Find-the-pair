// game/Progress.js - –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

window.ProgressManager = {
  // –ö–ª—é—á –¥–ª—è localStorage
  STORAGE_KEY: 'findpair_progress',
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
  getProgress() {
    try {
      const saved = localStorage.getItem(this.STORAGE_KEY);
      return saved ? JSON.parse(saved) : {};
    } catch (e) {
      console.warn('Error loading progress:', e);
      return {};
    }
  },
  
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è
  saveLevelResult(levelIndex, gameTime, attempts, errors) {
    const progress = this.getProgress();
    const accuracy = attempts > 0 ? (attempts - errors) / attempts : 0;
    
    // –†–∞—Å—á—ë—Ç –∑–≤—ë–∑–¥–æ—á–µ–∫ (1-3 –∑–≤–µ–∑–¥—ã)
    let stars = 1; // –º–∏–Ω–∏–º—É–º 1 –∑–≤–µ–∑–¥–∞ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ
    
    if (accuracy >= 0.9 && gameTime <= 60) stars = 3;      // –æ—Ç–ª–∏—á–Ω–æ
    else if (accuracy >= 0.8 && gameTime <= 90) stars = 2; // —Ö–æ—Ä–æ—à–æ
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª—É—á—à–µ
    const current = progress[levelIndex];
    if (!current || stars > current.stars || 
        (stars === current.stars && gameTime < current.bestTime)) {
      
      progress[levelIndex] = {
        stars,
        bestTime: gameTime,
        bestAccuracy: Math.round(accuracy * 100),
        attempts,
        errors,
        completedAt: Date.now()
      };
      
      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(progress));
    }
    
    return { stars, improved: !current || stars > current.stars };
  },
  
  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
  getLevelResult(levelIndex) {
    const progress = this.getProgress();
    return progress[levelIndex] || null;
  },
  
  // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  getStats() {
    const progress = this.getProgress();
    const levels = Object.keys(progress);
    
    return {
      totalLevels: window.LEVELS.length,
      completedLevels: levels.length,
      totalStars: levels.reduce((sum, key) => sum + progress[key].stars, 0),
      maxStars: window.LEVELS.length * 3,
      averageStars: levels.length > 0 ? 
        levels.reduce((sum, key) => sum + progress[key].stars, 0) / levels.length : 0
    };
  }
};

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ GameScene.js - –¥–æ–±–∞–≤–∏—Ç—å –≤ showWin():
/*
showWin() {
  this.canClick = false;
  this.cards.forEach(c => c.disableInteractive());

  const gameTime = Math.round((Date.now() - this.gameMetrics.startTime) / 1000);
  const levelIndex = window.LEVELS.findIndex(l => l === this.currentLevel);
  
  // –î–û–ë–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const result = window.ProgressManager.saveLevelResult(
    levelIndex, gameTime, this.gameMetrics.attempts, this.gameMetrics.errors
  );
  
  const { W, H } = this.getSceneWH();
  
  // –ü–æ–∫–∞–∑ –∑–≤—ë–∑–¥–æ—á–µ–∫
  const starsY = H * 0.28;
  const starSize = 40;
  const starSpacing = 60;
  
  for (let i = 1; i <= 3; i++) {
    const x = W/2 + (i - 2) * starSpacing;
    const filled = i <= result.stars;
    const star = this.add.text(x, starsY, filled ? '‚òÖ' : '‚òÜ', {
      fontSize: `${starSize}px`,
      color: filled ? '#FFD700' : '#666666'
    }).setOrigin(0.5);
    
    if (filled && result.improved) {
      // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∑–≤—ë–∑–¥–æ—á–µ–∫
      star.setScale(0);
      this.tweens.add({
        targets: star,
        scale: 1.2,
        duration: 300,
        delay: i * 150,
        ease: 'Back.easeOut',
        yoyo: true,
        repeat: 0
      });
    }
  }
  
  this.add.text(W/2, H*0.22, '–ü–æ–±–µ–¥–∞!', {
    fontFamily: THEME.font, fontSize: this._pxByH(0.088, 22, 48) + 'px',
    color:'#FFFFFF', fontStyle:'800'
  }).setOrigin(0.5);

  this.add.text(W/2, H*0.36, 
    `–í—Ä–µ–º—è: ${gameTime}—Å | –ü–æ–ø—ã—Ç–æ–∫: ${this.gameMetrics.attempts} | –û—à–∏–±–æ–∫: ${this.gameMetrics.errors}`, {
    fontFamily: THEME.font, fontSize: this._pxByH(0.044, 14, 24) + 'px',
    color:'#E8E1C9', fontStyle:'600'
  }).setOrigin(0.5);

  const btn = window.makeImageButton(
    this, W/2, H*0.50, Math.min(380, W*0.6), Math.min(80, H*0.12),
    'üîÑ  –°—ã–≥—Ä–∞—Ç—å –µ—â—ë',
    () => this.scene.start('MenuScene', { page: this.levelPage })
  );
  btn.setDepth(10);
}
*/
