//---scenes/GameScene.js - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ü–†–û–ì–†–ï–°–°–û–ú –ò –ó–í–Å–ó–î–û–ß–ö–ê–ú–ò

window.GameScene = class GameScene extends Phaser.Scene {
  
  constructor() { 
    super('GameScene'); 
  }

  init(data) {
    this.currentLevel = data?.level || null;
    this.levelPage = data?.page || 0;
    
    // VK –¥–∞–Ω–Ω—ã–µ –∏–∑ PreloadScene
    this.vkUserData = data?.userData || window.VK_USER_DATA;
    this.isVKEnvironment = data?.isVK || !!window.VK_LAUNCH_PARAMS;
    
    // –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–ª–æ–∫–∞–ª—å–Ω–∞—è + VK)
    this.achievements = this.getAchievements();
    this.vkAchievementManager = window.VKAchievementManager || null;
    
    this.sessionStats = {
      gamesPlayed: 0,
      totalTime: 0,
      totalErrors: 0,
      perfectGames: 0
    };

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ resize
    this.gameState = {
      deck: null,           // –ò—Å—Ö–æ–¥–Ω–∞—è –∫–æ–ª–æ–¥–∞ (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
      openedCards: [],      // –û—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã
      matchedCards: [],     // –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã
      gameStarted: false,   // –§–ª–∞–≥ –Ω–∞—á–∞—Ç–æ–π –∏–≥—Ä—ã
      canResize: true,      // –ú–æ–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å resize
      isMemorizationPhase: false, // –§–∞–∑–∞ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (5 —Å–µ–∫)
      currentSeed: null     // –¢–µ–∫—É—â–∏–π seed –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
    };
    
    // Seed –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    this.gameSeed = this.generateSeed();
    this.gameState.currentSeed = this.gameSeed;

    console.log('üéÆ GameScene init:', {
      isVK: this.isVKEnvironment,
      hasVKUser: !!this.vkUserData,
      hasVKAchievements: !!this.vkAchievementManager,
      seed: this.gameSeed
    });
  }

  // –î–û–ë–ê–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ seed
  generateSeed() {
    const urlParams = new URLSearchParams(window.location.search);
    const urlSeed = urlParams.get('seed');
    
    if (urlSeed) {
      return parseInt(urlSeed, 36); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: ?seed=abc123
    }
    
    // –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è + —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
    const levelHash = this.currentLevel ? 
      (this.currentLevel.cols * 1000 + this.currentLevel.rows) : 1;
    return (Date.now() + levelHash) % 2147483647;
  }

  // –î–û–ë–ê–í–õ–ï–ù–û: –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ
  seededRandom(seed) {
    const x = Math.sin(seed) * 10000;
    return x - Math.floor(x);
  }

  shuffleWithSeed(array, seed) {
    const result = [...array];
    let currentSeed = seed;
    
    for (let i = result.length - 1; i > 0; i--) {
      currentSeed = (currentSeed * 1103515245 + 12345) & 0x7fffffff;
      const j = Math.floor(this.seededRandom(currentSeed) * (i + 1));
      [result[i], result[j]] = [result[j], result[i]];
    }
    return result;
  }

  _pxClamp(px, minPx, maxPx) { 
    return Math.round(Phaser.Math.Clamp(px, minPx, maxPx)); 
  }
  
  _pxByH(fraction, minPx, maxPx) { 
    const { H } = this.getSceneWH(); 
    return this._pxClamp(H * fraction, minPx, maxPx); 
  }
  
  getDPR() { 
    return Math.min(2.0, Math.max(1, (window.devicePixelRatio || 1))); 
  }

  _createHiDPICanvasTexture(key, w, h, drawFn) {
    const DPR = this.getDPR();
    const tex = this.textures.createCanvas(key, Math.max(2, Math.round(w*DPR)), Math.max(2, Math.round(h*DPR)));
    const ctx = tex.getContext();
    ctx.save(); ctx.scale(DPR, DPR); drawFn(ctx, w, h); ctx.restore();
    tex.refresh();
    return tex;
  }

  preload() {}

  create() {
    if (this.scale && this.scale.updateBounds) this.scale.updateBounds();

    this.levelButtons = [];
    this.cards = [];
    this.opened = [];
    this.canClick = false;

    this.hud = null;
    this.mistakeCount = 0;
    this.mistakeText = null;
    
    // UI —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
    this.timeText = null;
    this.gameTimer = null;
    this.currentTimeSeconds = 0;

    this._wheelHandler = null;
    this.bgImage = null;
    this._texId = 0;

    // –î–û–ë–ê–í–õ–ï–ù–û: –¢–∞–π–º–µ—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    this.memorizeTimer = null;
    this.flipTimer = null;

    this.makePlaceholdersIfNeeded();
    this.ensureGradientBackground();

    if (!this.currentLevel) {
      this.scene.start('MenuScene', { page: this.levelPage });
      return;
    }

    this.startGame(this.currentLevel);

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ resize - –Ω–µ –ø–µ—Ä–µ—Ç–∞—Å–æ–≤—ã–≤–∞—Ç—å –∫–∞—Ä—Ç—ã
    this.scale.on('resize', () => {
      if (this.scale && this.scale.updateBounds) this.scale.updateBounds();
      
      console.log('Resize detected, gameStarted:', this.gameState.gameStarted);
      
      if (!this.gameState.canResize) {
        console.log('Resize blocked during critical game phase');
        return;
      }

      this.ensureGradientBackground();
      
      if (this.gameState.gameStarted || this.gameState.isMemorizationPhase) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ resize
        this.saveGameState();
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ layout, –Ω–µ –º–µ–Ω—è—è –ª–æ–≥–∏–∫—É –∏–≥—Ä—ã
        this.redrawLayout();
      } else {
        // –ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å, –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å
        this.startGame(this.currentLevel);
      }
    });
    
    this.events.once('shutdown', this.cleanup, this);
    this.events.once('destroy', this.cleanup, this);
  }

  // –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å—Ü–µ–Ω—ã
  cleanup() {
    console.log('GameScene cleanup started');
    
    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤
    if (this.memorizeTimer) {
      this.memorizeTimer.destroy();
      this.memorizeTimer = null;
    }
    
    if (this.flipTimer) {
      this.flipTimer.destroy();
      this.flipTimer = null;
    }
    
    if (this.gameTimer) {
      this.gameTimer.destroy();
      this.gameTimer = null;
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –∫–∞—Ä—Ç
    if (this.cards) {
      this.cards.forEach(card => {
        if (card && card.removeAllListeners) {
          card.removeAllListeners();
        }
      });
      this.cards = [];
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –∫–Ω–æ–ø–æ–∫
    if (this.exitBtn && this.exitBtn.zone) {
      this.exitBtn.zone.removeAllListeners();
    }

    // –û—á–∏—Å—Ç–∫–∞ resize —Å–ª—É—à–∞—Ç–µ–ª—è
    this.scale.off('resize');

    // –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    this.opened = [];
    this.currentLevel = null;
    this.gameMetrics = null;
    this._lastClickTime = null;
    this._processingCards = false;
    
    console.log('GameScene cleanup completed');
  }

  // –î–û–ë–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  saveGameState() {
    if (!this.cards.length) return;
    
    this.gameState.openedCards = this.cards
      .map((card, index) => ({
        index,
        key: card.getData('key'),
        opened: card.getData('opened'),
        matched: card.getData('matched')
      }))
      .filter(cardData => cardData.opened || cardData.matched);
      
    console.log('Game state saved:', this.gameState.openedCards.length, 'special cards');
  }

  // –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ layout –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
  redrawLayout() {
    if (!this.gameState.deck || !this.currentLevel) {
      console.warn('Cannot redraw: missing deck or level');
      return;
    }

    console.log('Redrawing layout with preserved state...');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const currentOpenedState = this.cards.map(card => ({
      opened: card.getData('opened'),
      matched: card.getData('matched')
    }));

    const wasMemorizing = this.gameState.isMemorizationPhase;
    const currentTime = this.currentTimeSeconds;
    const wasGameStarted = this.gameState.gameStarted;

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    this.stopAllActiveProcesses();
    
    // –û—á–∏—â–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ
    this.clearVisualElements();
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã —Å —Ç–µ–º –∂–µ deck
    this.createCardLayout(this.gameState.deck);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç
    this.cards.forEach((card, index) => {
      if (currentOpenedState[index]) {
        card.setData('opened', currentOpenedState[index].opened);
        card.setData('matched', currentOpenedState[index].matched);
        
        // –í–∏–∑—É–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (wasMemorizing || currentOpenedState[index].opened || currentOpenedState[index].matched) {
          card.setTexture(card.getData('key'));
        } else {
          card.setTexture('back');
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if (currentOpenedState[index].matched) {
          card.setAlpha(THEME.cardDimAlpha).disableInteractive();
        } else if (!wasMemorizing && wasGameStarted) {
          card.setInteractive({ useHandCursor: true });
        }
      }
    });
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    this.gameState.gameStarted = wasGameStarted;
    this.gameState.isMemorizationPhase = wasMemorizing;
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º HUD
    this.drawHUD();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    if (wasGameStarted && !wasMemorizing) {
      this.currentTimeSeconds = currentTime;
      if (this.timeText) {
        this.timeText.setText(this.formatTime(this.currentTimeSeconds));
      }
      this.startGameTimer();
    }
    
    console.log('Layout redrawn, game state preserved');
  }

  // –î–û–ë–ê–í–õ–ï–ù–û: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
  stopAllActiveProcesses() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    this.stopGameTimer();
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if (this.memorizeTimer) {
      this.memorizeTimer.destroy();
      this.memorizeTimer = null;
    }
    
    if (this.flipTimer) {
      this.flipTimer.destroy();
      this.flipTimer = null;
    }
    
    // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏
    if (this.time && this.time.delayedCall) {
      this.time.removeAllEvents();
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    this.canClick = false;
    this._processingCards = false;
    
    // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç
    this.opened = [];
  }

  // –î–û–ë–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  clearVisualElements() {
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç
    if (this.cards && Array.isArray(this.cards)) {
      this.cards.forEach(card => {
        if (card && card.scene) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—ä–µ–∫—Ç –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          card.destroy();
        }
      });
    }
    this.cards = [];
    
    this.clearHUD();
  }

  getSceneWH() {
    const s = this.scale, cam = this.cameras?.main;
    const W = (s && (s.width ?? s.gameSize?.width)) || cam?.width || this.sys.game.config.width || 800;
    const H = (s && (s.height ?? s.gameSize?.height)) || cam?.height || this.sys.game.config.height || 600;
    return { W: Math.floor(W), H: Math.floor(H) };
  }

  // –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  getAchievements() {
    // –ï—Å–ª–∏ –µ—Å—Ç—å VK –º–µ–Ω–µ–¥–∂–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (this.vkAchievementManager) {
      return this.vkAchievementManager.achievements;
    }
    
    // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage
    const saved = localStorage.getItem('findpair_achievements');
    return saved ? JSON.parse(saved) : {
      first_win: false,
      perfect_game: false,
      speed_runner: false,
      persistent: false,
      expert: false
    };
  }

  async saveAchievements() {
    try {
      if (this.vkAchievementManager) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ VK –º–µ–Ω–µ–¥–∂–µ—Ä
        this.vkAchievementManager.achievements = this.achievements;
        await this.vkAchievementManager.saveAchievements();
      } else {
        // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        localStorage.setItem('findpair_achievements', JSON.stringify(this.achievements));
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Failed to save achievements:', error);
      // Fallback –∫ localStorage
      localStorage.setItem('findpair_achievements', JSON.stringify(this.achievements));
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  formatTime(seconds) {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return mins > 0 ? `${mins}:${secs.toString().padStart(2, '0')}` : `${secs}—Å`;
  }

  // –£–õ–£–ß–®–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HUD —Å —Ç–∞–π–º–µ—Ä–æ–º
  drawHUD() {
    this.clearHUD();
    const { W, H } = this.getSceneWH();
    const hudH = Math.min(100, Math.round(H * 0.12));

    // –§–æ–Ω HUD
    const hud = this.add.graphics().setDepth(5);
    hud.fillStyle(0x000000, 0.85);
    hud.fillRoundedRect(0, 0, W, hudH, 0);
    this.hud = hud;

    const fontSize = this._pxByH(0.035, 14, 20);

    // –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å–ª–µ–≤–∞
    this.mistakeText = this.add.text(20, hudH/2, '–û—à–∏–±–æ–∫: ' + this.mistakeCount, {
      fontFamily: THEME.font, fontSize: fontSize + 'px', color: '#FF6B6B', fontStyle: '600'
    }).setOrigin(0, 0.5).setDepth(6);

    // –¢–∞–π–º–µ—Ä –ø–æ —Ü–µ–Ω—Ç—Ä—É
    this.timeText = this.add.text(W/2, hudH/2, this.formatTime(this.currentTimeSeconds), {
      fontFamily: THEME.font, fontSize: (fontSize + 2) + 'px', color: '#4ECDC4', fontStyle: '700'
    }).setOrigin(0.5, 0.5).setDepth(6);

    // –ö–Ω–æ–ø–∫–∞ –¥–æ–º–æ–π —Å–ø—Ä–∞–≤–∞
    const size = Math.round(hudH * 0.76);
    const homeBtn = window.makeIconButton(
      this, W - (size/2 + 14), Math.round(hudH/2), size,
      '‚åÇ',
      () => { 
        this.stopGameTimer();
        this.scene.start('MenuScene', { page: this.levelPage }); 
      }
    );
    homeBtn.setDepth(7);
    this.exitBtn = homeBtn;
  }

  clearHUD() {
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (this.hud && this.hud.scene) this.hud.destroy();
    if (this.mistakeText && this.mistakeText.scene) this.mistakeText.destroy();
    if (this.timeText && this.timeText.scene) this.timeText.destroy();
    if (this.exitBtn && this.exitBtn.scene) this.exitBtn.destroy();
    this.hud = this.mistakeText = this.timeText = this.exitBtn = null;
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–º
  startGameTimer() {
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
    if (this.gameTimer) {
      this.gameTimer.destroy();
      this.gameTimer = null;
    }
    
    this.gameTimer = this.time.addEvent({
      delay: 1000,
      callback: () => {
        this.currentTimeSeconds++;
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        if (this.timeText && this.timeText.scene) {
          this.timeText.setText(this.formatTime(this.currentTimeSeconds));
        }
      },
      loop: true
    });
  }

  stopGameTimer() {
    if (this.gameTimer) {
      this.gameTimer.destroy();
      this.gameTimer = null;
    }
  }

  startGame(level) {
    console.log('üöÄ Starting game with level:', level);
    
    if (!level || !level.cols || !level.rows) {
      console.error('Invalid level data:', level);
      this.scene.start('MenuScene', { page: this.levelPage });
      return;
    }
       
    this.currentLevel = level;
    this.mistakeCount = 0;
    this.currentTimeSeconds = 0;

    const total = level.cols * level.rows;
    if (total % 2 !== 0) {
      console.error('–ù–µ—á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ —è—á–µ–µ–∫ –≤ —Å–µ—Ç–∫–µ', level);
      this.scene.start('MenuScene', { page: this.levelPage });
      return;
    }

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–≥—Ä—ã
    this.gameMetrics = {
      startTime: null, // –°—Ç–∞—Ä—Ç—É–µ—Ç –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç
      attempts: 0,
      errors: 0,
      pairs: Math.floor(total / 2),
      level: level,
      timeToFirstMatch: null,
      matchTimes: []
    };  

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–ª–æ–¥—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç
    if (!this.gameState.deck || this.gameState.currentSeed !== this.gameSeed) {
      const pairs = Math.floor(total / 2);
      const shuffledKeys = this.shuffleWithSeed([...window.ALL_CARD_KEYS], this.gameSeed);
      const base = Array.from({length: pairs}, (_, i) => 
        shuffledKeys[i % shuffledKeys.length]);
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏—Ö –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ
      this.gameState.deck = this.shuffleWithSeed(
        base.concat(base), 
        this.gameSeed + 1000 // –î—Ä—É–≥–æ–π seed –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
      );
      
      this.gameState.currentSeed = this.gameSeed;
      
      console.log('Generated deterministic deck with seed:', this.gameSeed);
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    this.stopAllActiveProcesses();
    this.clearVisualElements();
    this.ensureGradientBackground();
    
    this.opened = [];
    this.canClick = false;
    this.gameState.gameStarted = false;
    this.gameState.isMemorizationPhase = true;
    this.gameState.canResize = false; // –ë–ª–æ–∫–∏—Ä—É–µ–º resize –Ω–∞ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞

    this.drawHUD();
    this.createCardLayout(this.gameState.deck);

    // –î–û–ë–ê–í–õ–ï–ù–û: 5-—Å–µ–∫—É–Ω–¥–Ω—ã–π –ø–æ–∫–∞–∑ –∫–∞—Ä—Ç –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    this.showCardsForMemorization();
  }

  // –î–û–ë–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ layout –∫–∞—Ä—Ç
  createCardLayout(deck) {
    const level = this.currentLevel;
    const { W, H } = this.getSceneWH();
    const hudH = Math.min(100, Math.round(H * 0.12));
    const gameAreaH = H - hudH - 20;
    
    const maxCardW = Math.min(140, (W - 40) / level.cols - 10);
    const maxCardH = Math.min(190, gameAreaH / level.rows - 10);
    
    const cardW = Math.min(maxCardW, maxCardH * 0.7);
    const cardH = Math.min(maxCardH, maxCardW / 0.7);
    
    const totalW = level.cols * cardW + (level.cols - 1) * 8;
    const totalH = level.rows * cardH + (level.rows - 1) * 8;
    
    const offsetX = (W - totalW) / 2;
    const offsetY = hudH + 20 + (gameAreaH - totalH) / 2;

    for (let row = 0; row < level.rows; row++) {
      for (let col = 0; col < level.cols; col++) {
        const index = row * level.cols + col;
        const key = deck[index];
        
        const x = offsetX + col * (cardW + 8) + cardW/2;
        const y = offsetY + row * (cardH + 8) + cardH/2;
        
        const card = this.add.image(x, y, key) // –ù–ê–ß–ò–ù–ê–ï–ú –õ–ò–¶–û–ú!
          .setDisplaySize(cardW, cardH)
          .setData('key', key)
          .setData('opened', false)
          .setData('matched', false)
          .setInteractive({ useHandCursor: true })
          .on('pointerdown', () => this.onCardClick(card));
        
        this.cards.push(card);
      }
    }
  }

  // –î–û–ë–ê–í–õ–ï–ù–û: 5-—Å–µ–∫—É–Ω–¥–Ω—ã–π –ø–æ–∫–∞–∑ –∫–∞—Ä—Ç –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  showCardsForMemorization() {
    console.log('üß† Showing cards for memorization (5 seconds)...');
    
    const { W, H } = this.getSceneWH();
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º resize –≤–æ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç
    this.gameState.canResize = false;
    this.gameState.isMemorizationPhase = true;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –ª–∏—Ü–æ–º (–æ–Ω–∏ —É–∂–µ —Ç–∞–∫–∏–µ –ø–æ—Å–ª–µ createCardLayout)
    this.cards.forEach(card => {
      card.setTexture(card.getData('key'));
      card.disableInteractive(); // –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–∫–∏ –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = this.add.text(W/2, H*0.15, '–ó–∞–ø–æ–º–Ω–∏—Ç–µ –∫–∞—Ä—Ç—ã!', {
      fontFamily: THEME.font,
      fontSize: this._pxByH(0.05, 24, 32) + 'px',
      color: '#FFD700',
      fontStyle: 'bold'
    }).setOrigin(0.5).setDepth(1000);

    // –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç
    let countdown = 5;
    const countdownText = this.add.text(W/2, H*0.22, countdown.toString(), {
      fontFamily: THEME.font,
      fontSize: this._pxByH(0.08, 36, 48) + 'px',
      color: '#FF4444',
      fontStyle: 'bold'
    }).setOrigin(0.5).setDepth(1000);

    // –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞
    this.memorizeTimer = this.time.addEvent({
      delay: 1000,
      repeat: 4,
      callback: () => {
        countdown--;
        if (countdown > 0) {
          countdownText.setText(countdown.toString());
          // –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏
          this.tweens.add({
            targets: countdownText,
            scale: 1.3,
            duration: 200,
            yoyo: true,
            ease: 'Power2'
          });
        } else {
          // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞
          notification.destroy();
          countdownText.destroy();
          
          // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã
          this.flipAllCardsAndStartGame();
        }
      }
    });
  }

  // –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –∫–∞—Ä—Ç –∏ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
  flipAllCardsAndStartGame() {
    console.log('üîÑ Flipping all cards and starting game...');
    
    // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç
    this.cards.forEach((card, index) => {
      this.tweens.add({
        targets: card,
        scaleX: 0,
        duration: 200,
        delay: index * 30, // –∫–∞—Å–∫–∞–¥–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        ease: 'Power2.easeIn',
        onComplete: () => {
          card.setTexture('back');
          this.tweens.add({
            targets: card,
            scaleX: 1,
            duration: 200,
            ease: 'Power2.easeOut'
          });
        }
      });
    });

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞
    this.flipTimer = this.time.delayedCall(1000, () => {
      // –í–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç
      this.cards.forEach(card => {
        card.setInteractive({ useHandCursor: true });
      });
      
      this.canClick = true;
      this.gameState.gameStarted = true;
      this.gameState.isMemorizationPhase = false;
      this.gameState.canResize = true; // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º resize –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
      
      // –í–ê–ñ–ù–û: –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∏–≥—Ä—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç
      this.gameMetrics.startTime = Date.now();
      this.startGameTimer();
      
      console.log('‚úÖ Game fully started, timer running, clicks enabled');
    });
  }

  onCardClick(card) {
    if (!this.canClick || this._processingCards) return;
    if (card.getData('opened') || card.getData('matched')) return;

    // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –∑–∞—â–∏—Ç–∞ –æ—Ç –±—ã—Å—Ç—Ä—ã—Ö –∫–ª–∏–∫–æ–≤
    const now = Date.now();
    if (this._lastClickTime && now - this._lastClickTime < 250) {
      console.log('Click ignored - too fast');
      return;
    }
    this._lastClickTime = now;
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∫–ª–∏–∫–∏ –Ω–∞ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    this._processingCards = true;
    
    this.gameMetrics.attempts++;

    card.setTexture(card.getData('key'));
    card.setData('opened', true);
    this.opened.push(card);

    if (this.opened.length === 2) {
      this.canClick = false;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º delayedCall –≤–º–µ—Å—Ç–æ setTimeout
      const checkTimer = this.time.delayedCall(450, () => {
        const [a, b] = this.opened;
        if (a.getData('key') === b.getData('key')) {
          // –¢—Ä–µ–∫–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Ç—á–µ–π
          const matchTime = (Date.now() - this.gameMetrics.startTime) / 1000;
          this.gameMetrics.matchTimes.push(matchTime);
          
          if (this.gameMetrics.timeToFirstMatch === null) {
            this.gameMetrics.timeToFirstMatch = matchTime;
          }
          
          a.setData('matched', true).setAlpha(THEME.cardDimAlpha).disableInteractive();
          b.setData('matched', true).setAlpha(THEME.cardDimAlpha).disableInteractive();
          a.setData('opened', false); 
          b.setData('opened', false);
        } else {
          this.mistakeCount++;
          this.gameMetrics.errors++;
          if (this.mistakeText) this.mistakeText.setText('–û—à–∏–±–æ–∫: ' + this.mistakeCount);
          a.setTexture('back').setData('opened', false);
          b.setTexture('back').setData('opened', false);
        }
        
        this.opened = [];
        this.canClick = true;
        this._processingCards = false;

        if (this.cards.every(c => c.getData('matched'))) {
          this.showWin();
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–π–º–µ—Ä –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
      this.gameTimer = checkTimer;
    } else {
      // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞
      this._processingCards = false;
    }
  }

  // –£–õ–£–ß–®–ï–ù–û: –≠–∫—Ä–∞–Ω –ø–æ–±–µ–¥—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –∑–≤—ë–∑–¥–æ—á–∫–∞–º–∏
  showWin() {
    this.canClick = false;
    this.gameState.gameStarted = false; // –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    this.stopGameTimer(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    this.cards.forEach(c => c.disableInteractive());

    const gameTime = this.currentTimeSeconds;
    const accuracy = this.gameMetrics.attempts > 0 ? 
      Math.round((1 - this.gameMetrics.errors / this.gameMetrics.attempts) * 100) : 100;

    // –î–û–ë–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –∑–≤—ë–∑–¥–æ—á–µ–∫
    const levelIndex = window.LEVELS.findIndex(l => l === this.currentLevel);
    const progressResult = this.saveProgress(levelIndex, gameTime, this.gameMetrics.attempts, this.gameMetrics.errors);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    this.checkAchievements(gameTime, this.gameMetrics.errors, this.currentLevel);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–≥—Ä—ã –≤ VK
    this.sendVKGameStats(gameTime, accuracy);

    console.log('üèÜ Game finished:', {
      time: gameTime,
      attempts: this.gameMetrics.attempts,
      errors: this.gameMetrics.errors,
      accuracy: accuracy,
      stars: progressResult.stars,
      improved: progressResult.improved
    });

    const { W, H } = this.getSceneWH();

    // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
    const overlay = this.add.graphics().setDepth(100);
    overlay.fillStyle(0x000000, 0.8);
    overlay.fillRect(0, 0, W, H);

    // –ö—Ä–∞—Å–∏–≤–æ–µ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const panelW = Math.min(500, W * 0.9);
    const panelH = Math.min(450, H * 0.8);
    const panelX = W/2;
    const panelY = H/2;

    const panel = this.add.graphics().setDepth(101);
    panel.fillStyle(0x2C3E50, 0.95);
    panel.lineStyle(3, 0x3498DB, 0.8);
    panel.fillRoundedRect(panelX - panelW/2, panelY - panelH/2, panelW, panelH, 20);
    panel.strokeRoundedRect(panelX - panelW/2, panelY - panelH/2, panelW, panelH, 20);

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    this.add.text(panelX, panelY - panelH/2 + 50, 'üéâ –ü–û–ë–ï–î–ê! üéâ', {
      fontFamily: THEME.font, 
      fontSize: this._pxByH(0.06, 24, 42) + 'px', 
      color: '#F39C12', 
      fontStyle: '800'
    }).setOrigin(0.5).setDepth(102);

    // –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–≤—ë–∑–¥–æ—á–µ–∫
    this.showStarsAnimation(panelX, panelY - panelH/2 + 100, progressResult);

    // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const statsY = panelY - panelH/2 + 160;
    const lineHeight = 30;
    
    this.add.text(panelX, statsY, `‚è±Ô∏è –í—Ä–µ–º—è: ${this.formatTime(gameTime)}`, {
      fontFamily: THEME.font, fontSize: '18px', color: '#4ECDC4', fontStyle: '600'
    }).setOrigin(0.5).setDepth(102);

    this.add.text(panelX, statsY + lineHeight, `üéØ –ü–æ–ø—ã—Ç–æ–∫: ${this.gameMetrics.attempts}`, {
      fontFamily: THEME.font, fontSize: '16px', color: '#E8E1C9', fontStyle: '500'
    }).setOrigin(0.5).setDepth(102);

    this.add.text(panelX, statsY + lineHeight * 2, `‚ùå –û—à–∏–±–æ–∫: ${this.mistakeCount}`, {
      fontFamily: THEME.font, fontSize: '16px', color: '#E74C3C', fontStyle: '500'
    }).setOrigin(0.5).setDepth(102);

    this.add.text(panelX, statsY + lineHeight * 3, `üìä –¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy}%`, {
      fontFamily: THEME.font, fontSize: '16px', color: '#2ECC71', fontStyle: '500'
    }).setOrigin(0.5).setDepth(102);

    // –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (progressResult.improved) {
      this.add.text(panelX, statsY + lineHeight * 4, 'üÜï –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!', {
        fontFamily: THEME.font, fontSize: '18px', color: '#F39C12', fontStyle: '700'
      }).setOrigin(0.5).setDepth(102);
    }

    // –ö–Ω–æ–ø–∫–∏
    const btnY = panelY + panelH/2 - 60;
    const btnW = Math.min(160, panelW * 0.35);
    const btnH = 45;

    // –ö–Ω–æ–ø–∫–∞ "–ï—â—ë —Ä–∞–∑"
    const playAgainBtn = window.makeImageButton(
      this, panelX - btnW/2 - 10, btnY, btnW, btnH,
      'üîÑ –ï—â—ë —Ä–∞–∑',
      () => this.restartLevel()
    );
    playAgainBtn.setDepth(102);

    // –ö–Ω–æ–ø–∫–∞ "–ú–µ–Ω—é"
    const menuBtn = window.makeImageButton(
      this, panelX + btnW/2 + 10, btnY, btnW, btnH,
      'üè† –ú–µ–Ω—é',
      () => {
        this.gameState.gameStarted = false;
        this.scene.start('MenuScene', { page: this.levelPage });
      }
    );
    menuBtn.setDepth(102);
  }

  // –î–û–ë–ê–í–õ–ï–ù–û: –°–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –∑–≤—ë–∑–¥–æ—á–∫–∞–º–∏
  saveProgress(levelIndex, gameTime, attempts, errors) {
    const accuracy = attempts > 0 ? (attempts - errors) / attempts : 0;
    
    // –†–∞—Å—á—ë—Ç –∑–≤—ë–∑–¥–æ—á–µ–∫ (1-3 –∑–≤–µ–∑–¥—ã)
    let stars = 1; // –º–∏–Ω–∏–º—É–º 1 –∑–≤–µ–∑–¥–∞ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ
    
    if (accuracy >= 0.9 && gameTime <= 60) stars = 3;      // –æ—Ç–ª–∏—á–Ω–æ
    else if (accuracy >= 0.8 && gameTime <= 90) stars = 2; // —Ö–æ—Ä–æ—à–æ
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    const progress = this.getProgress();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª—É—á—à–µ
    const current = progress[levelIndex];
    const improved = !current || stars > current.stars || 
      (stars === current.stars && gameTime < current.bestTime);
    
    if (improved) {
      progress[levelIndex] = {
        stars,
        bestTime: gameTime,
        bestAccuracy: Math.round(accuracy * 100),
        attempts,
        errors,
        completedAt: Date.now()
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      try {
        localStorage.setItem('findpair_progress', JSON.stringify(progress));
        
        // –¢–∞–∫–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å VK –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if (this.isVKEnvironment && window.VKHelpers) {
          window.VKHelpers.setStorageData('findpair_progress', progress)
            .catch(err => console.warn('VK sync failed:', err));
        }
      } catch (e) {
        console.warn('Failed to save progress:', e);
      }
    }
    
    return { stars, improved, currentBest: progress[levelIndex] };
  }

  // –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  getProgress() {
    try {
      const saved = localStorage.getItem('findpair_progress');
      return saved ? JSON.parse(saved) : {};
    } catch (e) {
      console.warn('Error loading progress:', e);
      return {};
    }
  }

  // –î–û–ë–ê–í–õ–ï–ù–û: –ê–Ω–∏–º–∞—Ü–∏—è –∑–≤—ë–∑–¥–æ—á–µ–∫
  showStarsAnimation(x, y, progressResult) {
    const { stars, improved } = progressResult;
    const starSize = 32;
    const starSpacing = 50;
    
    for (let i = 1; i <= 3; i++) {
      const starX = x + (i - 2) * starSpacing;
      const filled = i <= stars;
      const star = this.add.text(starX, y, filled ? '‚òÖ' : '‚òÜ', {
        fontSize: `${starSize}px`,
        color: filled ? '#FFD700' : '#666666'
      }).setOrigin(0.5).setDepth(102);
      
      if (filled && improved) {
        // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∑–≤—ë–∑–¥–æ—á–µ–∫
        star.setScale(0);
        this.tweens.add({
          targets: star,
          scale: 1.3,
          duration: 400,
          delay: i * 200,
          ease: 'Back.easeOut',
          yoyo: true,
          repeat: 0,
          onComplete: () => {
            star.setScale(1);
            // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–µ—Å–∫
            this.createStarSparkle(starX, y);
          }
        });
      }
    }
    
    // –¢–µ–∫—Å—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–≤—ë–∑–¥
    const starsText = `${stars}/3 ‚≠ê`;
    this.add.text(x, y + 40, starsText, {
      fontFamily: THEME.font,
      fontSize: '16px',
      color: '#F39C12',
      fontStyle: '600'
    }).setOrigin(0.5).setDepth(102);
  }

  // –î–û–ë–ê–í–õ–ï–ù–û: –≠—Ñ—Ñ–µ–∫—Ç –±–ª–µ—Å–∫–∞ –∑–≤—ë–∑–¥
  createStarSparkle(x, y) {
    const sparkles = ['‚ú®', '‚≠ê', 'üí´'];
    
    for (let i = 0; i < 3; i++) {
      const sparkle = this.add.text(x, y, sparkles[i % sparkles.length], {
        fontSize: '16px'
      }).setOrigin(0.5).setDepth(103);
      
      const angle = (i / 3) * Math.PI * 2;
      const distance = 30;
      
      this.tweens.add({
        targets: sparkle,
        x: x + Math.cos(angle) * distance,
        y: y + Math.sin(angle) * distance,
        alpha: 0,
        scale: 1.5,
        duration: 600,
        ease: 'Power2',
        onComplete: () => sparkle.destroy()
      });
    }
  }

  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É—Ä–æ–≤–Ω—è
  restartLevel() {
    this.gameState.gameStarted = false;
    this.gameState.deck = null; // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–ª–æ–¥—É –¥–ª—è –Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    this.gameSeed = this.generateSeed(); // –ù–æ–≤—ã–π seed
    this.startGame(this.currentLevel);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å VK –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
  async checkAchievements(gameTime, errors, level) {
    let newAchievements = [];
    
    // –ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞
    if (!this.achievements.first_win) {
      this.achievements.first_win = true;
      newAchievements.push({
        id: 'first_win',
        title: '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞!',
        description: '–ù–∞–π–¥–∏—Ç–µ –≤—Å–µ –ø–∞—Ä—ã –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑'
      });
    }
    
    // –ò–¥–µ–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ (–±–µ–∑ –æ—à–∏–±–æ–∫)
    if (errors === 0 && !this.achievements.perfect_game) {
      this.achievements.perfect_game = true;
      newAchievements.push({
        id: 'perfect_game',
        title: '–ò–¥–µ–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞!',
        description: '–ü—Ä–æ–π–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –±–µ–∑ –æ—à–∏–±–æ–∫'
      });
    }
    
    // –°–∫–æ—Ä–æ—Å—Ç–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ
    if (gameTime < 30 && !this.achievements.speed_runner) {
      this.achievements.speed_runner = true;
      newAchievements.push({
        id: 'speed_runner',
        title: '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –±–µ–≥—É–Ω!',
        description: '–ü—Ä–æ–π–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–∞ 30 —Å–µ–∫—É–Ω–¥'
      });
    }
    
    // –≠–∫—Å–ø–µ—Ä—Ç (—Å–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)
    const totalPairs = level.cols * level.rows / 2;
    if (totalPairs >= 9 && !this.achievements.expert) {
      this.achievements.expert = true;
      newAchievements.push({
        id: 'expert',
        title: '–≠–∫—Å–ø–µ—Ä—Ç –ø–∞–º—è—Ç–∏!',
        description: '–ü—Ä–æ–π–¥–∏—Ç–µ —Å–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å'
      });
    }
    
    // –£–ø–æ—Ä—Å—Ç–≤–æ (–º–Ω–æ–≥–æ –∏–≥—Ä –ø–æ–¥—Ä—è–¥)
    this.sessionStats.gamesPlayed++;
    if (this.sessionStats.gamesPlayed >= 5 && !this.achievements.persistent) {
      this.achievements.persistent = true;
      newAchievements.push({
        id: 'persistent',
        title: '–£–ø–æ—Ä—Å—Ç–≤–æ!',
        description: '–°—ã–≥—Ä–∞–π—Ç–µ 5 –∏–≥—Ä –ø–æ–¥—Ä—è–¥'
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (newAchievements.length > 0) {
      await this.saveAchievements();
      
      // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ VK (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
      if (this.vkAchievementManager) {
        for (const achievement of newAchievements) {
          try {
            const unlocked = await this.vkAchievementManager.unlockAchievement(achievement.id);
            if (unlocked) {
              console.log('üèÜ VK Achievement unlocked:', achievement.title);
            }
          } catch (error) {
            console.warn('‚ö†Ô∏è VK achievement unlock failed:', error);
          }
        }
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
      this.showAchievements(newAchievements);
      
      // VK —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
      await this.handleVKAchievements(newAchievements);
    }
  }

  // –î–û–ë–ê–í–õ–ï–ù–û: VK –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  async handleVKAchievements(newAchievements) {
    if (!this.isVKEnvironment || !window.VKSafe || !window.VKSafe.send) return;
    
    try {
      // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      if (window.VKSafe.supports && window.VKSafe.supports('VKWebAppTapticNotificationOccurred')) {
        await window.VKSafe.send('VKWebAppTapticNotificationOccurred', {
          type: 'success'
        });
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ VK
      if (window.VKSafe.supports && window.VKSafe.supports('VKWebAppStorageSet')) {
        const stats = {
          totalGames: this.sessionStats.gamesPlayed,
          totalAchievements: Object.values(this.achievements).filter(Boolean).length,
          lastPlayed: Date.now()
        };
        
        await window.VKSafe.send('VKWebAppStorageSet', {
          key: 'game_stats',
          value: JSON.stringify(stats)
        });
      }
      
      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –æ—Å–æ–±—ã–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
      const specialAchievements = ['first_win', 'perfect_game', 'speed_runner'];
      const hasSpecial = newAchievements.some(a => specialAchievements.includes(a.id));
      
      if (hasSpecial && Math.random() < 0.3) { // 30% —à–∞–Ω—Å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
        this.showVKShareDialog(newAchievements[0]);
      }
      
    } catch (error) {
      console.warn('‚ö†Ô∏è VK achievement handling failed:', error);
    }
  }

  // –î–û–ë–ê–í–õ–ï–ù–û: VK –¥–∏–∞–ª–æ–≥ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
  async showVKShareDialog(achievement) {
    try {
      const userName = this.vkUserData?.first_name || '–ò–≥—Ä–æ–∫';
      const message = `${userName} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${achievement.title}" –≤ –∏–≥—Ä–µ "Find the Pair"! üèÜ\n\n${achievement.description}`;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ—Å—Ç–∞ –Ω–∞ —Å—Ç–µ–Ω—É
      if (window.VKSafe.supports && window.VKSafe.supports('VKWebAppShowWallPostBox')) {
        await window.VKSafe.send('VKWebAppShowWallPostBox', {
          message: message,
          attachments: window.location.href
        });
      }
    } catch (error) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∏–ª–∏ –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      console.log('VK sharing cancelled');
    }
  }

  // –ü–æ–∫–∞–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –∫—Ä–∞—Å–∏–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
  showAchievements(achievements) {
    const { W, H } = this.getSceneWH();
    
    achievements.forEach((achievement, index) => {
      // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const bgWidth = 320;
      const bgHeight = 80;
      const x = W / 2;
      const y = 100 + index * 100;
      
      // –§–æ–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const achievementBg = this.add.graphics().setDepth(200);
      achievementBg.fillStyle(0x2C3E50, 0.95);
      achievementBg.lineStyle(3, 0xF39C12, 0.8);
      achievementBg.fillRoundedRect(x - bgWidth/2, y - bgHeight/2, bgWidth, bgHeight, 10);
      achievementBg.strokeRoundedRect(x - bgWidth/2, y - bgHeight/2, bgWidth, bgHeight, 10);
      
      // –ò–∫–æ–Ω–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const achievementIcon = this.add.text(x - bgWidth/2 + 25, y, 'üèÜ', {
        fontSize: '32px'
      }).setOrigin(0.5).setDepth(201);
      
      // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const achievementTitle = this.add.text(x - bgWidth/2 + 60, y - 10, achievement.title, {
        fontFamily: THEME.font,
        fontSize: '18px',
        color: '#F39C12',
        fontStyle: '700'
      }).setOrigin(0, 0.5).setDepth(201);
      
      // –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const achievementDesc = this.add.text(x - bgWidth/2 + 60, y + 15, achievement.description, {
        fontFamily: THEME.font,
        fontSize: '14px',
        color: '#E8E1C9',
        fontStyle: '500'
      }).setOrigin(0, 0.5).setDepth(201);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
      const achievementGroup = this.add.container(0, 0, [
        achievementBg, achievementIcon, achievementTitle, achievementDesc
      ]);
      
      // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
      achievementGroup.setAlpha(0);
      achievementGroup.setScale(0.8);
      
      this.tweens.add({
        targets: achievementGroup,
        alpha: 1,
        scale: 1,
        duration: 500,
        delay: index * 300,
        ease: 'Back.easeOut',
        onComplete: () => {
          // –ß–∞—Å—Ç–∏—Ü—ã –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏
          this.createAchievementParticles(x, y);
        }
      });

      // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
      this.time.delayedCall(4000 + index * 300, () => {
        this.tweens.add({
          targets: achievementGroup,
          alpha: 0,
          scale: 0.8,
          duration: 300,
          onComplete: () => {
            achievementGroup.destroy();
          }
        });
      });
    });
    
    // –ó–≤—É–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (this.sound && this.sound.get('achievement_sound')) {
      this.sound.play('achievement_sound', { volume: 0.5 });
    }
  }

  // –î–û–ë–ê–í–õ–ï–ù–û: –≠—Ñ—Ñ–µ–∫—Ç—ã —á–∞—Å—Ç–∏—Ü –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  createAchievementParticles(x, y) {
    // –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è "–∑–≤–µ–∑–¥–æ—á–µ–∫" –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const emojis = ['‚ú®', '‚≠ê', 'üéâ', 'üí´'];
    
    for (let i = 0; i < 8; i++) {
      const angle = (i / 8) * Math.PI * 2;
      const distance = 50;
      const particleX = x + Math.cos(angle) * distance;
      const particleY = y + Math.sin(angle) * distance;
      
      const particle = this.add.text(x, y, emojis[i % emojis.length], {
        fontSize: '16px'
      }).setDepth(202);
      
      this.tweens.add({
        targets: particle,
        x: particleX,
        y: particleY,
        alpha: 0,
        scale: 1.5,
        duration: 800,
        ease: 'Power2',
        onComplete: () => particle.destroy()
      });
    }
  }

  // –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ VK
  async sendVKGameStats(gameTime, accuracy) {
    if (!this.isVKEnvironment || !window.VKSafe || !window.VKSafe.send) return;
    
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã –≤ VK Storage
      const gameStats = {
        level: {
          cols: this.currentLevel.cols,
          rows: this.currentLevel.rows,
          pairs: this.gameMetrics.pairs
        },
        performance: {
          time: gameTime,
          attempts: this.gameMetrics.attempts,
          errors: this.gameMetrics.errors,
          accuracy: accuracy
        },
        timestamp: Date.now(),
        userId: window.VK_LAUNCH_PARAMS?.user_id
      };
      
      if (window.VKSafe.supports && window.VKSafe.supports('VKWebAppStorageSet')) {
        await window.VKSafe.send('VKWebAppStorageSet', {
          key: `game_result_${Date.now()}`,
          value: JSON.stringify(gameStats)
        });
      }
      
      console.log('üìä Game stats sent to VK Storage');
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Failed to send VK game stats:', error);
    }
  }

  // Dev –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  devRevealAll() {
    if (!this.cards) return;
    this.cards.forEach(card => {
      card.setTexture(card.getData('key'));
      card.setData('opened', true);
    });
    console.log('DEV: All cards revealed');
  }

  devTestPair() {
    if (!this.cards || this.cards.length < 2) return;
    const firstCard = this.cards[0];
    const matchingCard = this.cards.find(card => 
      card !== firstCard && card.getData('key') === firstCard.getData('key'));
    
    if (matchingCard) {
      [firstCard, matchingCard].forEach(card => {
        card.setTexture(card.getData('key'));
        card.setData('matched', true);
      });
      console.log('DEV: Test pair matched');
    }
  }

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  ensureGradientBackground() {
    const { W, H } = this.getSceneWH();

    if (this.textures.exists('bg_game')) {
      this.bgImage && this.bgImage.destroy();
      const img = this.add.image(W/2, H/2, 'bg_game').setOrigin(0.5).setDepth(-1000);
      const src = this.textures.get('bg_game').getSourceImage();
      const scale = Math.max(W / src.width, H / src.height);
      img.setDisplaySize(src.width * scale, src.height * scale);
      this.bgImage = img;
      return;
    }

    const key = 'bg-grad-game';
    const DPR = this.getDPR();
    if (this.textures.exists(key)) {
      const src = this.textures.get(key).getSourceImage();
      if (src.width !== Math.round(W*DPR) || src.height !== Math.round(H*DPR)) this.textures.remove(key);
    }
    if (!this.textures.exists(key)) {
      const tex = this.textures.createCanvas(key, Math.max(2, Math.round(W*DPR)), Math.max(2, Math.round(H*DPR)));
      const ctx = tex.getContext(); ctx.save(); ctx.scale(DPR, DPR);
      const g = ctx.createLinearGradient(0,0,0,H);
      g.addColorStop(0, THEME.bgTop); g.addColorStop(0.6, THEME.bgMid); g.addColorStop(1, THEME.bgBottom);
      ctx.fillStyle = g; ctx.fillRect(0,0,W,H);
      ctx.restore(); tex.refresh();
    }
    this.bgImage && this.bgImage.destroy();
    this.bgImage = this.add.image(0,0,key).setOrigin(0,0).setDepth(-1000).setDisplaySize(W,H);
  }

  makePlaceholdersIfNeeded() {
    if (this.textures.exists('back')) return;
    
    const tex = this.textures.createCanvas('back', 120, 160);
    const ctx = tex.getContext();
    ctx.fillStyle = '#2C3E50';
    ctx.fillRect(0, 0, 120, 160);
    ctx.strokeStyle = '#34495E';
    ctx.lineWidth = 2;
    ctx.strokeRect(1, 1, 118, 158);
    ctx.fillStyle = '#ECF0F1';
    ctx.font = '16px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('?', 60, 85);
    tex.refresh();
    
    window.ALL_CARD_KEYS.forEach(key => {
      if (!this.textures.exists(key)) {
        const cardTex = this.textures.createCanvas(key, 120, 160);
        const cardCtx = cardTex.getContext();
        cardCtx.fillStyle = '#E74C3C';
        cardCtx.fillRect(0, 0, 120, 160);
        cardCtx.fillStyle = '#FFFFFF';
        cardCtx.font = 'bold 20px Arial';
        cardCtx.textAlign = 'center';
        cardCtx.fillText(key.toUpperCase(), 60, 85);
        cardTex.refresh();
      }
    });
  }
};

// Dev –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ (—Ç–æ–ª—å–∫–æ –≤ development)
if (typeof window !== 'undefined' && (window.location.hostname === 'localhost' || window.location.search.includes('debug=1'))) {
  window.devGameScene = {
    revealAll: () => {
      const scene = window.game?.scene?.getScene('GameScene');
      if (scene) scene.devRevealAll();
    },
    testPair: () => {
      const scene = window.game?.scene?.getScene('GameScene');
      if (scene) scene.devTestPair();
    },
    setSeed: (seed) => {
      const scene = window.game?.scene?.getScene('GameScene');
      if (scene) {
        scene.gameSeed = seed;
        scene.gameState.deck = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–ª–æ–¥—É –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
        scene.gameState.currentSeed = null;
        console.log('Seed set to:', seed);
      }
    },
    getCurrentSeed: () => {
      const scene = window.game?.scene?.getScene('GameScene');
      if (scene) {
        console.log('Current seed:', scene.gameSeed);
        return scene.gameSeed;
      }
    },
    forceResize: () => {
      const scene = window.game?.scene?.getScene('GameScene');
      if (scene && scene.gameState.gameStarted) {
        console.log('Forcing resize test...');
        scene.saveGameState();
        scene.redrawLayout();
      }
    },
    testVKAchievement: (id) => {
      const scene = window.game?.scene?.getScene('GameScene');
      if (scene && scene.vkAchievementManager) {
        scene.vkAchievementManager.unlockAchievement(id);
      }
    },
    getProgress: () => {
      const scene = window.game?.scene?.getScene('GameScene');
      if (scene) {
        const progress = scene.getProgress();
        console.table(progress);
        return progress;
      }
    },
    clearProgress: () => {
      localStorage.removeItem('findpair_progress');
      console.log('Progress cleared');
    },
    setStars: (levelIndex, stars) => {
      const scene = window.game?.scene?.getScene('GameScene');
      if (scene) {
        const progress = scene.getProgress();
        progress[levelIndex] = { stars, bestTime: 30, bestAccuracy: 100, attempts: 10, errors: 0, completedAt: Date.now() };
        localStorage.setItem('findpair_progress', JSON.stringify(progress));
        console.log(`Level ${levelIndex} set to ${stars} stars`);
      }
    }
  };
  
  console.log('üéÆ Dev commands available:');
  console.log('devGameScene.revealAll() - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã');
  console.log('devGameScene.testPair() - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞—Ä—É');
  console.log('devGameScene.setSeed(123) - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å seed');
  console.log('devGameScene.getCurrentSeed() - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π seed');
  console.log('devGameScene.forceResize() - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å resize');
  console.log('devGameScene.testVKAchievement("first_win") - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å VK –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ');
  console.log('devGameScene.getProgress() - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å');
  console.log('devGameScene.clearProgress() - –æ—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å');
  console.log('devGameScene.setStars(0, 3) - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–≤—ë–∑–¥—ã –¥–ª—è —É—Ä–æ–≤–Ω—è');
}
