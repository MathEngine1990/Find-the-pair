//---scenes/GameScene.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
window.GameScene = class GameScene extends Phaser.Scene {
  
  constructor() { 
    super('GameScene'); 
  }

  init(data) {
    this.currentLevel = data?.level || null;
    this.currentLevelIndex = data?.levelIndex || 0;
    this.levelPage = data?.page || 0;
    
    // VK –¥–∞–Ω–Ω—ã–µ –∏–∑ PreloadScene
    this.vkUserData = data?.userData || window.VK_USER_DATA;
    this.isVKEnvironment = data?.isVK || !!window.VK_LAUNCH_PARAMS;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    this.syncManager = data?.syncManager || window.progressSyncManager || null;
    this.progressData = null;
    
    // –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–ª–æ–∫–∞–ª—å–Ω–∞—è + VK)
    this.achievements = this.getAchievements();
    this.vkAchievementManager = window.VKAchievementManager || null;
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ resize
    this.gameState = {
      deck: null,           
      openedCards: [],  
      gameStarted: false,   
      canResize: true,      
      isMemorizationPhase: false,
      currentSeed: null,
      showingVictory: false,
      cardWidth: null,
      cardHeight: null,
      gapSize: null
    };
    
    // –°—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã —ç–∫—Ä–∞–Ω–∞ –ø–æ–±–µ–¥—ã –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    this.victoryElements = null;
    this.victoryContainer = null;
    
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç
    this.cardsContainer = null;
    
    // –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è resize
    this.resizeTimeout = null;
    
    // AbortController –¥–ª—è –æ—Ç–º–µ–Ω—ã memorize
    this.memorizeController = null;
    
    // Seed –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    this.gameSeed = this.generateSeed();
    this.gameState.currentSeed = this.gameSeed;

    // –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    this.gameMetrics = {
      startTime: null,
      attempts: 0,
      errors: 0,
      pairs: 0,
      level: this.currentLevel,
      timeToFirstMatch: null,
      matchTimes: [],
      levelIndex: this.currentLevelIndex
    };

    console.log('GameScene init:', {
      isVK: this.isVKEnvironment,
      hasVKUser: !!this.vkUserData,
      hasVKAchievements: !!this.vkAchievementManager,
      hasSyncManager: !!this.syncManager,
      seed: this.gameSeed,
      levelIndex: this.currentLevelIndex
    });
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ seed
  generateSeed() {
    const urlParams = new URLSearchParams(window.location.search);
    const urlSeed = urlParams.get('seed');
    
    if (urlSeed) {
      return parseInt(urlSeed, 36);
    }
    
    const levelHash = this.currentLevel ? 
      (this.currentLevel.cols * 1000 + this.currentLevel.rows) : 1;
    return (Date.now() + levelHash) % 2147483647;
  }

  // –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ
  seededRandom(seed) {
    const x = Math.sin(seed) * 10000;
    return x - Math.floor(x);
  }

  shuffleWithSeed(array, seed) {
    const result = [...array];
    let currentSeed = seed;
    
    for (let i = result.length - 1; i > 0; i--) {
      currentSeed = (currentSeed * 1103515245 + 12345) & 0x7fffffff;
      const j = Math.floor(this.seededRandom(currentSeed) * (i + 1));
      [result[i], result[j]] = [result[j], result[i]];
    }
    return result;
  }

  _pxClamp(px, minPx, maxPx) { 
    return Math.round(Phaser.Math.Clamp(px, minPx, maxPx)); 
  }
  
  _pxByH(fraction, minPx, maxPx) { 
    const { H } = this.getSceneWH(); 
    return this._pxClamp(H * fraction, minPx, maxPx); 
  }
  
  getDPR() { 
    return Math.min(2.0, Math.max(1, (window.devicePixelRatio || 1))); 
  }

  preload() {}

  async create() {
    try {
      // ===== 1. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–û–í–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–• =====
      if (this.scale && this.scale.updateBounds) {
        this.scale.updateBounds();
      }
      
      // –ë–∞–∑–æ–≤—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      this.levelButtons = [];
      this.cards = [];
      this.opened = [];
      
      // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
      this.canClick = false;
      this.mistakeCount = 0;
      this.currentTimeSeconds = 0;
      
      // UI —ç–ª–µ–º–µ–Ω—Ç—ã (null –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
      this.hud = null;
      this.mistakeText = null;
      this.timeText = null;
      this.bgImage = null;
      
      // –¢–∞–π–º–µ—Ä—ã (–≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏)
      this.gameTimer = null;
      this.memorizeTimer = null;
      this.flipTimer = null;
      this.revealTimer = null;
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this._resizeHandler = null;
      this._wheelHandler = null;
      
      // –§–ª–∞–≥–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
      this._fontsReady = false;
      this._lastTapTime = 0;
      
      // ===== 2. –û–ñ–ò–î–ê–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –†–ï–°–£–†–°–û–í =====
      
      // –î–µ—Ç–µ–∫—Ç–æ—Ä long tasks
      if (window.PerformanceObserver) {
        const po = new PerformanceObserver((list) => {
          for (const entry of list.getEntries()) {
            if (entry.duration > 200) {
              console.warn(`‚ö†Ô∏è Long task detected: ${entry.duration}ms`, entry.name);
            }
          }
        });
        
        try {
          po.observe({ entryTypes: ['longtask'] });
          
          // –û—Ç–∫–ª—é—á–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
          this.time.delayedCall(5000, () => po.disconnect());
        } catch (e) {
          // –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç longtask
        }
      }
      
      // –ö–†–ò–¢–ò–ß–ù–û: –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫—É —à—Ä–∏—Ñ—Ç–æ–≤ –î–û –ª—é–±–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
      if (document.fonts && document.fonts.ready) {
        await document.fonts.ready;
        this._fontsReady = true;
        console.log('‚úÖ Fonts loaded and ready');
      }

      // –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã
      await this.drawHUD();
      
      // ===== 3. –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–ï–ù–ï–î–ñ–ï–†–û–í =====
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ë–ï–ó –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      this.initializeSyncManager().then(() => {
        console.log('‚úÖ Sync manager initialized');
      }).catch(error => {
        console.warn('‚ö†Ô∏è Sync manager failed, using local storage:', error);
      });
      
      // ===== 4. –ü–û–î–ì–û–¢–û–í–ö–ê –í–ò–ó–£–ê–õ–¨–ù–´–• –†–ï–°–£–†–°–û–í =====
      
      // –°–æ–∑–¥–∞—ë–º –∑–∞–≥–ª—É—à–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      this.makePlaceholdersIfNeeded();
      
      // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ–æ–Ω–∞
      this.ensureGradientBackground();
      
      // ===== 5. –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –ó–ê–ü–£–°–ö –ò–ì–†–´ =====
      
      if (!this.currentLevel || !this.currentLevel.cols || !this.currentLevel.rows) {
        console.error('‚ùå Invalid level data:', this.currentLevel);
        this.scene.start('MenuScene', { page: this.levelPage || 0 });
        return;
      }
      
      // ===== 6. –°–û–ó–î–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê RESIZE –° –ü–†–ê–í–ò–õ–¨–ù–û–ô –û–ß–ò–°–¢–ö–û–ô =====
      
      // –°–æ–∑–¥–∞—ë–º debounced handler (200ms –∑–∞–¥–µ—Ä–∂–∫–∞)
      const resizeDebounceTime = 200;
      
      this._resizeHandler = (gameSize) => {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        if (this.resizeTimeout) {
          clearTimeout(this.resizeTimeout);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        this.resizeTimeout = setTimeout(() => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ü–µ–Ω—ã
          if (!this.scene || !this.scene.isActive('GameScene')) {
            return;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å resize
          if (!this.gameState || !this.gameState.canResize) {
            console.log('‚ö†Ô∏è Resize blocked during critical phase');
            return;
          }
          
          console.log('üìê Resize executing after debounce');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º bounds
          if (this.scale && this.scale.updateBounds) {
            this.scale.updateBounds();
          }
          
          // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ñ–æ–Ω
          this.ensureGradientBackground();
          
          // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º layout —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
          if (this.gameState.gameStarted || this.gameState.isMemorizationPhase) {
            this.saveGameState();
            this.redrawLayout();
          } else if (this.cards.length === 0) {
            // –ï—Å–ª–∏ –∏–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞
            this.startGame(this.currentLevel);
          }
          
          this.resizeTimeout = null;
        }, resizeDebounceTime);
      };
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ resize –û–î–ò–ù —Ä–∞–∑
      this.scale.on('resize', this._resizeHandler, this);
      
      // ===== 7. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–ß–ò–°–¢–ö–ò =====
      
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏
      this.events.once('shutdown', () => {
        console.log('üßπ Scene shutdown - cleaning up');
        this.cleanup();
      });
      
      this.events.once('destroy', () => {
        console.log('üí• Scene destroy - full cleanup');
        this.cleanup();
      });
      
      // ===== 8. –ë–ï–ó–û–ü–ê–°–ù–´–ô –ó–ê–ü–£–°–ö –ò–ì–†–´ =====
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
      requestAnimationFrame(() => {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.startGame(this.currentLevel);
      });
      
      console.log('‚úÖ GameScene created successfully');
      
    } catch (error) {
      console.error('‚ùå Critical error in GameScene.create:', error);
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback –Ω–∞ –º–µ–Ω—é
      this.time.delayedCall(100, () => {
        this.scene.start('MenuScene', { page: this.levelPage || 0 });
      });
    }
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  async initializeSyncManager() {
    try {
      // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (window.progressSyncManager) {
        this.syncManager = window.progressSyncManager;
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ VK
      const isVK = window.VK_BRIDGE_READY && window.vkBridge;
      
      if (isVK && window.ProgressSyncManager) {
        this.syncManager = new window.ProgressSyncManager();
        window.progressSyncManager = this.syncManager;
      } else {
        // –í–Ω–µ VK - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ localStorage
        console.log('üì± Running outside VK - local storage only');
        this.syncManager = {
          loadProgress: () => this.loadProgressLocal(),
          saveProgress: (data) => this.saveProgressLocal(data),
          isVKAvailable: () => false
        };
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      if (this.syncManager) {
        this.progressData = await this.syncManager.loadProgress();
      }
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Sync manager initialization failed:', error);
      // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      this.progressData = this.loadProgressLocal();
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
  cleanup() {
    console.log('üßπ GameScene cleanup started');
    
    // ===== 1. –û–ß–ò–°–¢–ö–ê RESIZE TIMEOUT –í –ü–ï–†–í–£–Æ –û–ß–ï–†–ï–î–¨ =====
    if (this.resizeTimeout) {
      clearTimeout(this.resizeTimeout);
      this.resizeTimeout = null;
    }
    
    // ===== 2. –û–¢–ú–ï–ù–ê MEMORIZE CONTROLLER =====
    if (this.memorizeController) {
      this.memorizeController.abort();
      this.memorizeController = null;
    }
    
    // ===== 3. –û–ß–ò–°–¢–ö–ê –¢–ê–ô–ú–ï–†–û–í =====
    const timers = [
      'memorizeTimer', 'flipTimer', 'gameTimer',
      'revealTimer', 'checkTimer', 'hideTimer'
    ];
    
    timers.forEach(timerName => {
      if (this[timerName]) {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–∞
        if (typeof this[timerName].destroy === 'function') {
          this[timerName].destroy();
        } else if (typeof this[timerName].remove === 'function') {
          this[timerName].remove();
        } else if (typeof this[timerName] === 'number') {
          // –ï—Å–ª–∏ —ç—Ç–æ ID —Ç–∞–π–º–µ—Ä–∞
          clearTimeout(this[timerName]);
        }
        this[timerName] = null;
      }
    });
    
    // ===== 4. –û–ß–ò–°–¢–ö–ê TIME EVENTS =====
    if (this.time) {
      this.time.removeAllEvents();
    }
    
    // ===== 5. –û–ß–ò–°–¢–ö–ê TWEENS =====
    if (this.tweens) {
      this.tweens.killAll();
    }
    
    // ===== 6. –û–¢–ü–ò–°–ö–ê –û–¢ –°–û–ë–´–¢–ò–ô =====
    if (this.scale && this._resizeHandler) {
      this.scale.off('resize', this._resizeHandler);
      this._resizeHandler = null;
    }
    
    // Wheel handler
    if (this._wheelHandler && this.input) {
      this.input.off('wheel', this._wheelHandler);
      this._wheelHandler = null;
    }
    
    // Input —Å–æ–±—ã—Ç–∏—è
    if (this.input) {
      this.input.off('pointerdown');
      this.input.off('pointerup');
      this.input.off('pointermove');
    }
    
    // ===== 7. –û–ß–ò–°–¢–ö–ê –ö–û–ù–¢–ï–ô–ù–ï–†–ê –ö–ê–†–¢ =====
    if (this.cardsContainer) {
      this.cardsContainer.removeAll(true);
      this.cardsContainer.destroy();
      this.cardsContainer = null;
    }
    
    // ===== 8. –û–ß–ò–°–¢–ö–ê –ö–ê–†–¢ =====
    if (this.cards && Array.isArray(this.cards)) {
      this.cards.forEach(card => {
        if (card && card.scene) {
          card.removeAllListeners();
          card.destroy();
        }
      });
      this.cards = [];
    }
    
    // ===== 9. –û–ß–ò–°–¢–ö–ê UI –≠–õ–ï–ú–ï–ù–¢–û–í =====
    const uiElements = [
      'hud', 'mistakeText', 'timeText', 'bgImage',
      'exitBtn', 'victoryContainer'
    ];
    
    uiElements.forEach(elementName => {
      if (this[elementName] && this[elementName].destroy) {
        this[elementName].destroy();
        this[elementName] = null;
      }
    });
    
    // ===== 10. –û–ß–ò–°–¢–ö–ê –ú–ê–°–°–ò–í–û–í =====
    this.opened = [];
    this.levelButtons = [];
    
    // ===== 11. –°–ë–†–û–° –°–û–°–¢–û–Ø–ù–ò–Ø =====
    if (this.gameState) {
      this.gameState.canResize = true;
      this.gameState.gameStarted = false;
      this.gameState.isMemorizationPhase = false;
    }
    
    console.log('‚úÖ GameScene cleanup completed');
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: Fallback –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  getProgressFallback() {
    try {
      const saved = localStorage.getItem('findpair_progress');
      const parsed = saved ? JSON.parse(saved) : {};
      return parsed.levels ? parsed : { levels: parsed };
    } catch (error) {
      console.warn('Error loading fallback progress:', error);
      return { levels: {} };
    }
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
  setCardSize(card, width, height) {
    if (!card || !card.scene || !card.texture) return;
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–µ–∫—Å—Ç—É—Ä—ã
    const source = card.texture.source;
    if (!source || !source[0]) {
      console.warn('Card texture not ready');
      return;
    }
    
    const originalWidth = source[0].width || 100;
    const originalHeight = source[0].height || 100;
    
    const scaleX = width / originalWidth;
    const scaleY = height / originalHeight;
    
    card.setScale(scaleX, scaleY);
    card.setData('targetWidth', width);
    card.setData('targetHeight', height);
    card.setData('scaleX', scaleX);
    card.setData('scaleY', scaleY);
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
  restoreCardSize(card) {
    if (!card || !card.scene) return;
    
    const targetWidth = card.getData('targetWidth');
    const targetHeight = card.getData('targetHeight');
    
    if (targetWidth && targetHeight) {
      this.setCardSize(card, targetWidth, targetHeight);
    } else if (this.gameState.cardWidth && this.gameState.cardHeight) {
      this.setCardSize(card, this.gameState.cardWidth, this.gameState.cardHeight);
    }
  }

  // –°–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã –∫–∞—Ä—Ç—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
  setCardTexture(card, textureKey) {
    if (!card || !card.scene) return;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã
    const targetWidth = card.getData('targetWidth') || this.gameState.cardWidth;
    const targetHeight = card.getData('targetHeight') || this.gameState.cardHeight;
    
    // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É
    card.setTexture(textureKey);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
    if (targetWidth && targetHeight) {
      this.setCardSize(card, targetWidth, targetHeight);
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –ø–æ–±–µ–¥—ã
  clearVictoryScreen() {
    console.log('Clearing victory screen...');
    
    // –û—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (this.victoryContainer) {
      this.victoryContainer.destroy();
      this.victoryContainer = null;
    }
    
    // –û—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (this.victoryElements && Array.isArray(this.victoryElements)) {
      this.victoryElements.forEach(element => {
        if (element && element.destroy) {
          element.destroy();
        }
      });
      this.victoryElements = null;
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º depth (—ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥—ã)
    const toDestroy = [];
    this.children.list.forEach(child => {
      if (child && child.depth >= 100) {
        toDestroy.push(child);
      }
    });
    
    toDestroy.forEach(child => {
      if (child && child.destroy) {
        child.destroy();
      }
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    this.gameState.showingVictory = false;
    
    console.log('Victory screen cleared');
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  saveGameState() {
    if (!this.cards.length) return;
    
    this.gameState.openedCards = this.cards
      .map((card, index) => ({
        index,
        key: card.getData('key'),
        opened: card.getData('opened'),
        matched: card.getData('matched')
      }))
      .filter(cardData => cardData.opened || cardData.matched);
      
    console.log('Game state saved:', this.gameState.openedCards.length, 'special cards');
  }

  // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ layout –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
  async redrawLayout() {
    if (!this.gameState.deck || !this.currentLevel) {
      console.warn('Cannot redraw: missing deck or level');
      return;
    }

    console.log('Redrawing layout with preserved state...');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const currentOpenedState = this.cards.map(card => ({
      opened: card.getData('opened'),
      matched: card.getData('matched')
    }));

    const wasMemorizing = this.gameState.isMemorizationPhase;
    const currentTime = this.currentTimeSeconds;
    const wasGameStarted = this.gameState.gameStarted;

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    this.stopAllActiveProcesses();
    
    // –û—á–∏—â–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ
    this.clearVisualElements();
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã —Å —Ç–µ–º –∂–µ deck
    this.createCardLayout(this.gameState.deck);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç
    this.cards.forEach((card, index) => {
      if (currentOpenedState[index]) {
        card.setData('opened', currentOpenedState[index].opened);
        card.setData('matched', currentOpenedState[index].matched);
        
        // –í–∏–∑—É–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (wasMemorizing || currentOpenedState[index].opened || currentOpenedState[index].matched) {
          this.setCardTexture(card, card.getData('key'));
        } else {
          this.setCardTexture(card, 'back');
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if (currentOpenedState[index].matched) {
          card.setAlpha(window.THEME.cardDimAlpha).disableInteractive();
        } else if (!wasMemorizing && wasGameStarted) {
          card.setInteractive({ useHandCursor: true });
        }
      }
    });
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    this.gameState.gameStarted = wasGameStarted;
    this.gameState.isMemorizationPhase = wasMemorizing;
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º HUD
    await this.drawHUD().catch(console.error);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    if (wasGameStarted && !wasMemorizing) {
      this.currentTimeSeconds = currentTime;
      if (this.timeText) {
        this.timeText.setText(this.formatTime(this.currentTimeSeconds));
      }
      this.startGameTimer();
    }
    
    console.log('Layout redrawn, game state preserved');
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
  stopAllActiveProcesses() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    this.stopGameTimer();
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if (this.memorizeTimer) {
      this.memorizeTimer.destroy();
      this.memorizeTimer = null;
    }
    
    if (this.flipTimer) {
      this.flipTimer.destroy();
      this.flipTimer = null;
    }
    
    // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏
    if (this.time && this.time.delayedCall) {
      this.time.removeAllEvents();
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    this.canClick = false;
    this._processingCards = false;
    
    // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç
    this.opened = [];
  }

  // –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  clearVisualElements() {
    // –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥—ã –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    this.clearVictoryScreen();
    
    // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞—Ä—Ç
    if (this.cardsContainer) {
      this.cardsContainer.removeAll(true);
      this.cardsContainer.destroy();
      this.cardsContainer = null;
    }
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç
    if (this.cards && Array.isArray(this.cards)) {
      this.cards.forEach(card => {
        if (card && card.scene) {
          card.removeAllListeners();
          card.destroy();
        }
      });
    }
    this.cards = [];
    
    this.clearHUD();
  }

  getSceneWH() {
    const { width, height } = this.scale;
    return { W: width, H: height };
  }

  // –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  getAchievements() {
    if (this.vkAchievementManager) {
      return this.vkAchievementManager.achievements;
    }
    
    const saved = localStorage.getItem('findpair_achievements');
    return saved ? JSON.parse(saved) : {
      first_win: false,
      perfect_game: false,
      speed_runner: false,
      persistent: false,
      expert: false
    };
  }

  async saveAchievements() {
    try {
      if (this.vkAchievementManager) {
        this.vkAchievementManager.achievements = this.achievements;
        await this.vkAchievementManager.saveAchievements();
      } else {
        localStorage.setItem('findpair_achievements', JSON.stringify(this.achievements));
      }
    } catch (error) {
      console.warn('Failed to save achievements:', error);
      localStorage.setItem('findpair_achievements', JSON.stringify(this.achievements));
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  formatTime(seconds) {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return mins > 0 ? `${mins}:${secs.toString().padStart(2, '0')}` : `${secs}—Å`;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HUD —Å —Ç–∞–π–º–µ—Ä–æ–º
  async drawHUD() {
    if (document.fonts && !this._fontsReady) {
      await document.fonts.ready;
      this._fontsReady = true;
    }
    
    this.clearHUD();
    const { W, H } = this.getSceneWH();
    const hudH = Math.min(100, Math.round(H * 0.12));

    // –§–æ–Ω HUD
    const hud = this.add.graphics().setDepth(5);
    hud.fillStyle(0x000000, 0.85);
    hud.fillRoundedRect(0, 0, W, hudH, 0);
    this.hud = hud;

    const fontSize = this._pxByH(0.035, 14, 20);

    // –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å–ª–µ–≤–∞
    this.mistakeText = this.add.text(20, hudH/2, '–û—à–∏–±–æ–∫: ' + this.mistakeCount, {
      fontFamily: 'Arial, sans-serif', fontSize: fontSize + 'px', color: '#FF6B6B', fontStyle: 'bold'
    }).setOrigin(0, 0.5).setDepth(6);

    // –¢–∞–π–º–µ—Ä –ø–æ —Ü–µ–Ω—Ç—Ä—É
    this.timeText = this.add.text(W/2, hudH/2, this.formatTime(this.currentTimeSeconds), {
      fontFamily: 'Arial, sans-serif', fontSize: (fontSize + 2) + 'px', color: '#4ECDC4', fontStyle: 'bold'
    }).setOrigin(0.5, 0.5).setDepth(6);

    // –ö–Ω–æ–ø–∫–∞ –¥–æ–º–æ–π —Å–ø—Ä–∞–≤–∞
    const size = Math.round(hudH * 0.76);
    const homeBtn = window.makeIconButton(
      this, W - (size/2 + 14), Math.round(hudH/2), size,
      '‚åÇ',
      () => { 
        this.stopGameTimer();
        this.scene.start('MenuScene', { page: this.levelPage }); 
      }
    );
    homeBtn.setDepth(7);
    this.exitBtn = homeBtn;
  }

  clearHUD() {
    if (this.hud && this.hud.scene) this.hud.destroy();
    if (this.mistakeText && this.mistakeText.scene) this.mistakeText.destroy();
    if (this.timeText && this.timeText.scene) this.timeText.destroy();
    if (this.exitBtn && this.exitBtn.scene) this.exitBtn.destroy();
    this.hud = this.mistakeText = this.timeText = this.exitBtn = null;
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–º
  startGameTimer() {
    if (this.gameTimer) {
      this.gameTimer.destroy();
      this.gameTimer = null;
    }
    
    this.gameTimer = this.time.addEvent({
      delay: 1000,
      callback: () => {
        this.currentTimeSeconds++;
        if (this.timeText && this.timeText.scene) {
          this.timeText.setText(this.formatTime(this.currentTimeSeconds));
        }
      },
      loop: true
    });
  }

  stopGameTimer() {
    if (this.gameTimer) {
      this.gameTimer.destroy();
      this.gameTimer = null;
    }
  }

  async startGame(level) {
    console.log('Starting game with level:', level);
    
    if (!level || !level.cols || !level.rows) {
      console.error('Invalid level data:', level);
      this.scene.start('MenuScene', { page: this.levelPage });
      return;
    }
       
    this.currentLevel = level;
    this.mistakeCount = 0;
    this.currentTimeSeconds = 0;

    const total = level.cols * level.rows;
    if (total % 2 !== 0) {
      console.error('–ù–µ—á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ —è—á–µ–µ–∫ –≤ —Å–µ—Ç–∫–µ', level);
      this.scene.start('MenuScene', { page: this.levelPage });
      return;
    }

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–≥—Ä—ã
    this.gameMetrics = {
      startTime: null, // –°—Ç–∞—Ä—Ç—É–µ—Ç –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç
      attempts: 0,
      errors: 0,
      pairs: Math.floor(total / 2),
      level: level,
      levelIndex: this.currentLevelIndex,
      timeToFirstMatch: null,
      matchTimes: []
    };  

    // –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–ª–æ–¥—ã
    if (!this.gameState.deck || this.gameState.currentSeed !== this.gameSeed) {
      const pairs = Math.floor(total / 2);
      const shuffledKeys = this.shuffleWithSeed([...window.ALL_CARD_KEYS], this.gameSeed);
      const base = Array.from({length: pairs}, (_, i) => 
        shuffledKeys[i % shuffledKeys.length]);
      
      this.gameState.deck = this.shuffleWithSeed(
        base.concat(base), 
        this.gameSeed + 1000
      );
      
      this.gameState.currentSeed = this.gameSeed;
      
      console.log('Generated deterministic deck with seed:', this.gameSeed);
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    this.stopAllActiveProcesses();
    this.clearVisualElements();
    this.ensureGradientBackground();
    
    this.opened = [];
    this.canClick = false;
    this.gameState.gameStarted = false;
    this.gameState.isMemorizationPhase = true;
    this.gameState.canResize = false; // –ë–ª–æ–∫–∏—Ä—É–µ–º resize –Ω–∞ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞

    await this.drawHUD().catch(console.error);
    this.createCardLayout(this.gameState.deck);

    // 5-—Å–µ–∫—É–Ω–¥–Ω—ã–π –ø–æ–∫–∞–∑ –∫–∞—Ä—Ç –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    this.showCardsForMemorization();
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ layout –∫–∞—Ä—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ä–∞–∑–º–µ—Ä–æ–≤
  createCardLayout(deck) {
    const level = this.currentLevel;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã viewport –±–µ–∑ –≤—ã—á–µ—Ç–æ–≤
    const { width: W, height: H } = this.scale;
    
    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π HUD - –º–µ–Ω—å—à–µ –º–µ—Å—Ç–∞ –∑–∞–Ω–∏–º–∞–µ—Ç
    const hudH = Math.min(80, Math.round(H * 0.1));
    const gameAreaH = H - hudH - 10;
    
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–∞—Ä—Ç –ø–æ–¥ –ª—é–±–æ–π —ç–∫—Ä–∞–Ω
    const horizontalPadding = W * 0.02;
    const verticalPadding = H * 0.02;
    
    const availableW = W - (horizontalPadding * 2);
    const availableH = gameAreaH - (verticalPadding * 2);
    
    // –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤
    const gapSize = Math.min(8, W * 0.01);
    const cardMaxW = (availableW - (level.cols - 1) * gapSize) / level.cols;
    const cardMaxH = (availableH - (level.rows - 1) * gapSize) / level.rows;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –∫–∞—Ä—Ç
    const aspectRatio = 0.7;
    let cardW, cardH;
    
    if (cardMaxW / cardMaxH > aspectRatio) {
        cardH = cardMaxH;
        cardW = cardH * aspectRatio;
    } else {
        cardW = cardMaxW;
        cardH = cardW / aspectRatio;
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –Ω–∞ –±–æ–ª—å—à–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö
    const maxAbsoluteCardW = Math.min(150, W * 0.15);
    const maxAbsoluteCardH = Math.min(200, H * 0.2);
    
    cardW = Math.min(cardW, maxAbsoluteCardW);
    cardH = Math.min(cardH, maxAbsoluteCardH);
    
    // –û–∫—Ä—É–≥–ª—è–µ–º –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏
    cardW = Math.floor(cardW);
    cardH = Math.floor(cardH);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    this.gameState.cardWidth = cardW;
    this.gameState.cardHeight = cardH;
    this.gameState.gapSize = gapSize;
    
    console.log('Adaptive card dimensions:', cardW, 'x', cardH, 'gap:', gapSize);
    
    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ç–∫—É –∫–∞—Ä—Ç –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
    const totalW = level.cols * cardW + (level.cols - 1) * gapSize;
    const totalH = level.rows * cardH + (level.rows - 1) * gapSize;
    
    // –¢–æ—á–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤
    const offsetX = (W - totalW) / 2;
    const offsetY = hudH + (gameAreaH - totalH) / 2;
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ä—Ç
    if (!this.cardsContainer) {
        this.cardsContainer = this.add.container(0, 0);
    }
    this.cardsContainer.removeAll(true);
    
    for (let row = 0; row < level.rows; row++) {
        for (let col = 0; col < level.cols; col++) {
            const index = row * level.cols + col;
            const key = deck[index];
            
            const x = offsetX + col * (cardW + gapSize) + cardW/2;
            const y = offsetY + row * (cardH + gapSize) + cardH/2;
            
            const card = this.add.image(x, y, key)
                .setData('key', key)
                .setData('opened', false)
                .setData('matched', false)
                .setData('index', index)
                .setInteractive({ useHandCursor: true })
                .on('pointerdown', () => this.onCardClick(card));
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–∞
            this.setCardSize(card, cardW, cardH);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            this.cardsContainer.add(card);
            this.cards.push(card);
        }
    }
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if (totalW > W || totalH > gameAreaH) {
        const scaleX = W / totalW * 0.95;
        const scaleY = gameAreaH / totalH * 0.95;
        const scale = Math.min(scaleX, scaleY, 1);
        
        this.cardsContainer.setScale(scale);
        console.log('Container scaled to:', scale);
    }
  }

  // 5-—Å–µ–∫—É–Ω–¥–Ω—ã–π –ø–æ–∫–∞–∑ –∫–∞—Ä—Ç –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  showCardsForMemorization() {
    console.log('Showing cards for memorization (5 seconds)...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ü–µ–Ω—ã
    if (!this.scene || !this.scene.isActive('GameScene')) {
      console.warn('Scene not active, aborting memorization');
      return;
    }
    
    const { W, H } = this.getSceneWH();
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º resize –≤–æ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç
    this.gameState.canResize = false;
    this.gameState.isMemorizationPhase = true;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –ª–∏—Ü–æ–º
    this.cards.forEach(card => {
      this.setCardTexture(card, card.getData('key'));
      card.disableInteractive();
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = this.add.text(W/2, H*0.15, '–ó–∞–ø–æ–º–Ω–∏—Ç–µ –∫–∞—Ä—Ç—ã!', {
      fontFamily: 'Arial, sans-serif',
      fontSize: this._pxByH(0.05, 24, 32) + 'px',
      color: '#FFD700',
      fontStyle: 'bold'
    }).setOrigin(0.5).setDepth(1000);

    // –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç
    let countdown = 5;
    const countdownText = this.add.text(W/2, H*0.22, countdown.toString(), {
      fontFamily: 'Arial, sans-serif',
      fontSize: this._pxByH(0.08, 36, 48) + 'px',
      color: '#FF4444',
      fontStyle: 'bold'
    }).setOrigin(0.5).setDepth(1000);

    // AbortController –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–º–µ–Ω—ã
    this.memorizeController = new AbortController();

    // –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞
    this.memorizeTimer = this.time.addEvent({
      delay: 1000,
      repeat: 4,
      callback: () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ü–µ–Ω—ã
        if (!this.scene || this.memorizeController?.signal.aborted) {
          this.memorizeTimer?.remove();
          return;
        }
        
        countdown--;
        if (countdown > 0) {
          countdownText.setText(countdown.toString());
          // –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏
          this.tweens.add({
            targets: countdownText,
            scale: 1.3,
            duration: 200,
            yoyo: true,
            ease: 'Power2'
          });
        } else {
          // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞
          notification.destroy();
          countdownText.destroy();
          
          // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã
          this.flipAllCardsAndStartGame();
        }
      }
    });
  }

  // –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –∫–∞—Ä—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–æ–≤
  flipAllCardsAndStartGame() {
    console.log('Flipping all cards and starting game...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ü–µ–Ω—ã
    if (!this.scene || !this.scene.isActive('GameScene')) {
      console.warn('Scene not active, aborting flip');
      return;
    }
    
    // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–æ–≤
    this.cards.forEach((card, index) => {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—Ä–∞—Ö –ø–µ—Ä–µ–¥ –∞–Ω–∏–º–∞—Ü–∏–µ–π
      const scaleX = card.getData('scaleX');
      const scaleY = card.getData('scaleY');
      
      this.tweens.add({
        targets: card,
        scaleX: 0,
        duration: 200,
        delay: index * 30,
        ease: 'Power2.easeIn',
        onComplete: () => {
          // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –Ω–∞ –∑–∞–¥–Ω—é—é —Å—Ç–æ—Ä–æ–Ω—É
          this.setCardTexture(card, 'back');
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
          this.tweens.add({
            targets: card,
            scaleX: scaleX,
            duration: 200,
            ease: 'Power2.easeOut'
          });
        }
      });
    });

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞
    this.flipTimer = this.time.delayedCall(1000, () => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ü–µ–Ω—ã
      if (!this.scene || !this.scene.isActive('GameScene')) {
        return;
      }
      
      // –í–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç
      this.cards.forEach(card => {
        card.setInteractive({ useHandCursor: true });
        this.restoreCardSize(card);
      });
      
      this.canClick = true;
      this.gameState.gameStarted = true;
      this.gameState.isMemorizationPhase = false;
      this.gameState.canResize = true;
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∏–≥—Ä—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç
      this.gameMetrics.startTime = Date.now();
      this.startGameTimer();
      
      console.log('Game fully started, timer running, clicks enabled');
    });
  }

  onCardClick(card) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ü–µ–Ω—ã
    if (!this.scene || !this.scene.isActive('GameScene')) {
      return;
    }
    
    if (event && event.preventDefault) {
      event.preventDefault();
      event.stopPropagation();
    }
    
    // –¢—Ä–æ–π–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç race conditions
    if (!this.canClick || this._processingCards) return;
    if (card.getData('opened') || card.getData('matched')) return;
    if (card.getData('isAnimating')) return;
    
    const now = Date.now();
    if (this._lastClickTime && now - this._lastClickTime < 300) {
      return;
    }
    
    // –ü–æ–º–µ—á–∞–µ–º –∫–∞—Ä—Ç—É –∫–∞–∫ –∞–Ω–∏–º–∏—Ä—É—é—â—É—é—Å—è
    card.setData('isAnimating', true);
    this._lastClickTime = now;
    this._processingCards = true;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞
    this.tweens.add({
      targets: card,
      scaleX: 0,
      duration: 150,
      onComplete: () => {
        this.setCardTexture(card, card.getData('key'));
        this.tweens.add({
          targets: card,
          scaleX: card.getData('scaleX') || 1,
          duration: 150,
          onComplete: () => {
            card.setData('isAnimating', false);
            card.setData('opened', true);
            this.opened.push(card);
            
            if (this.opened.length === 2) {
              this.checkPair();
            } else {
              this._processingCards = false;
            }
          }
        });
      }
    });
  }

  checkPair() {
    if (this.opened.length !== 2) return;
    
    const [card1, card2] = this.opened;
    this.gameMetrics.attempts++;
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–ª–∏–∫–∏ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    this.canClick = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (card1.getData('key') === card2.getData('key')) {
      // –°–û–í–ü–ê–î–ï–ù–ò–ï
      console.log('Match found!');
      
      // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ
      card1.setData('matched', true);
      card2.setData('matched', true);
      
      // –ó–∞—Ç–µ–º–Ω—è–µ–º –∫–∞—Ä—Ç—ã
      card1.setAlpha(window.THEME?.cardDimAlpha || 0.5).disableInteractive();
      card2.setAlpha(window.THEME?.cardDimAlpha || 0.5).disableInteractive();
      
      // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö
      this.opened = [];
      
      // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–∏
      this._processingCards = false;
      this.canClick = true;
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
      if (!this.gameMetrics.timeToFirstMatch) {
        this.gameMetrics.timeToFirstMatch = Date.now() - this.gameMetrics.startTime;
      }
      this.gameMetrics.matchTimes.push(Date.now() - this.gameMetrics.startTime);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
      const allMatched = this.cards.every(card => card.getData('matched'));
      if (allMatched) {
        this.showWin();
      }
      
    } else {
      // –ù–ï –°–û–í–ü–ê–î–ï–ù–ò–ï
      console.log('No match');
      
      this.gameMetrics.errors++;
      this.mistakeCount++;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
      if (this.mistakeText) {
        this.mistakeText.setText('–û—à–∏–±–æ–∫: ' + this.mistakeCount);
      }
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ 800ms
      this.time.delayedCall(800, () => {
        if (card1 && card1.scene) {
          this.tweens.add({
            targets: card1,
            scaleX: 0,
            duration: 150,
            onComplete: () => {
              this.setCardTexture(card1, 'back');
              this.tweens.add({
                targets: card1,
                scaleX: card1.getData('scaleX') || 1,
                duration: 150,
                onComplete: () => {
                  card1.setData('opened', false);
                }
              });
            }
          });
        }
        
        if (card2 && card2.scene) {
          this.tweens.add({
            targets: card2,
            scaleX: 0,
            duration: 150,
            onComplete: () => {
              this.setCardTexture(card2, 'back');
              this.tweens.add({
                targets: card2,
                scaleX: card2.getData('scaleX') || 1,
                duration: 150,
                onComplete: () => {
                  card2.setData('opened', false);
                }
              });
            }
          });
        }
        
        // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
        this.opened = [];
        this._processingCards = false;
        this.canClick = true;
      });
    }
  }

  // –≠–∫—Ä–∞–Ω –ø–æ–±–µ–¥—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π ProgressSyncManager
  async showWin() {
    this.clearVictoryScreen();
    
    this.canClick = false;
    this.gameState.gameStarted = false;
    this.gameState.showingVictory = true;
    this.stopGameTimer();
    this.cards.forEach(c => c.disableInteractive());

    const gameTime = this.currentTimeSeconds;
    const accuracy = this.gameMetrics.attempts > 0 ? 
      Math.round((1 - this.gameMetrics.errors / this.gameMetrics.attempts) * 100) : 100;

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ProgressSyncManager
    const progressResult = await this.saveProgressViaSyncManager(
      this.currentLevelIndex, 
      gameTime, 
      this.gameMetrics.attempts, 
      this.gameMetrics.errors,
      accuracy
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    await this.checkAndUnlockAchievements(progressResult, gameTime, this.gameMetrics.errors);

    console.log('Game finished:', {
      time: gameTime,
      attempts: this.gameMetrics.attempts,
      errors: this.gameMetrics.errors,
      accuracy: accuracy,
      stars: progressResult.stars,
      improved: progressResult.improved
    });

    const { W, H } = this.getSceneWH();

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —ç–∫—Ä–∞–Ω–∞ –ø–æ–±–µ–¥—ã
    this.victoryContainer = this.add.container(0, 0);
    this.victoryContainer.setDepth(100);

    // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
    const overlay = this.add.graphics();
    overlay.fillStyle(0x000000, 0.9);
    overlay.fillRect(0, 0, W, H);
    this.victoryContainer.add(overlay);

    // –ö—Ä–∞—Å–∏–≤–æ–µ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const panelW = Math.min(500, W * 0.9);
    const panelH = Math.min(450, H * 0.8);
    const panelX = W/2;
    const panelY = H/2;

    const panel = this.add.graphics();
    panel.fillStyle(0x2C3E50, 0.95);
    panel.lineStyle(3, 0x3498DB, 0.8);
    panel.fillRoundedRect(panelX - panelW/2, panelY - panelH/2, panelW, panelH, 20);
    panel.strokeRoundedRect(panelX - panelW/2, panelY - panelH/2, panelW, panelH, 20);
    this.victoryContainer.add(panel);

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const title = this.add.text(panelX, panelY - panelH/2 + 50, '–ü–û–ë–ï–î–ê!', {
      fontFamily: 'Arial, sans-serif', 
      fontSize: this._pxByH(0.06, 24, 42) + 'px', 
      color: '#F39C12', 
      fontStyle: 'bold'
    }).setOrigin(0.5);
    this.victoryContainer.add(title);

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–≤—ë–∑–¥–æ—á–µ–∫
    this.showStarsAnimation(panelX, panelY - panelH/2 + 100, progressResult);

    // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const statsY = panelY - panelH/2 + 160;
    const lineHeight = 30;
    
    const timeText = this.add.text(panelX, statsY, `–í—Ä–µ–º—è: ${this.formatTime(gameTime)}`, {
      fontFamily: 'Arial, sans-serif', fontSize: '18px', color: '#4ECDC4', fontStyle: 'bold'
    }).setOrigin(0.5);
    this.victoryContainer.add(timeText);

    const attemptsText = this.add.text(panelX, statsY + lineHeight, `–ü–æ–ø—ã—Ç–æ–∫: ${this.gameMetrics.attempts}`, {
      fontFamily: 'Arial, sans-serif', fontSize: '16px', color: '#E8E1C9', fontStyle: 'normal'
    }).setOrigin(0.5);
    this.victoryContainer.add(attemptsText);

    const errorsText = this.add.text(panelX, statsY + lineHeight * 2, `–û—à–∏–±–æ–∫: ${this.mistakeCount}`, {
      fontFamily: 'Arial, sans-serif', fontSize: '16px', color: '#E74C3C', fontStyle: 'normal'
    }).setOrigin(0.5);
    this.victoryContainer.add(errorsText);

    const accuracyText = this.add.text(panelX, statsY + lineHeight * 3, `–¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy}%`, {
      fontFamily: 'Arial, sans-serif', fontSize: '16px', color: '#2ECC71', fontStyle: 'normal'
    }).setOrigin(0.5);
    this.victoryContainer.add(accuracyText);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if (progressResult.improved) {
      const recordText = this.add.text(panelX, statsY + lineHeight * 4, '–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!', {
        fontFamily: 'Arial, sans-serif', fontSize: '18px', color: '#F39C12', fontStyle: 'bold'
      }).setOrigin(0.5);
      this.victoryContainer.add(recordText);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if (progressResult.synced) {
      const syncText = this.add.text(panelX, statsY + lineHeight * 5, '‚òÅÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ', {
        fontFamily: 'Arial, sans-serif', fontSize: '14px', color: '#27AE60', fontStyle: 'normal'
      }).setOrigin(0.5);
      this.victoryContainer.add(syncText);
    } else if (progressResult.syncError) {
      const syncErrorText = this.add.text(panelX, statsY + lineHeight * 5, '‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', {
        fontFamily: 'Arial, sans-serif', fontSize: '14px', color: '#E74C3C', fontStyle: 'normal'
      }).setOrigin(0.5);
      this.victoryContainer.add(syncErrorText);
    }

    // –ö–Ω–æ–ø–∫–∏
    const btnY = panelY + panelH/2 - 60;
    const btnW = Math.min(160, panelW * 0.35);
    const btnH = 45;

    // –ö–Ω–æ–ø–∫–∞ "–ï—â—ë —Ä–∞–∑"
    const playAgainBtn = window.makeImageButton(
      this, panelX - btnW/2 - 10, btnY, btnW, btnH,
      '–ï—â—ë —Ä–∞–∑',
      () => this.restartLevel()
    );
    playAgainBtn.setDepth(102);

    // –ö–Ω–æ–ø–∫–∞ "–ú–µ–Ω—é"
    const menuBtn = window.makeImageButton(
      this, panelX + btnW/2 + 10, btnY, btnW, btnH,
      '–ú–µ–Ω—é',
      () => {
        this.clearVictoryScreen();
        this.gameState.gameStarted = false;
        this.scene.start('MenuScene', { page: this.levelPage });
      }
    );
    menuBtn.setDepth(102);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    this.victoryElements = [playAgainBtn, menuBtn];
  }

  // [–û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô]
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–µ—Ä–µ–∑ ProgressSyncManager
  async saveProgressViaSyncManager(levelIndex, gameTime, attempts, errors, accuracy) {
    // [–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π]
    let stars = 1;
    const errorRate = attempts > 0 ? errors / attempts : 0;
    
    if (errorRate === 0 && gameTime <= 60) stars = 3;
    else if (errorRate <= 0.2 && gameTime <= 90) stars = 2;
    
    const result = {
      stars,
      improved: false,
      synced: false,
      syncError: false,
      currentBest: null
    };

    try {
      if (this.syncManager) {
        const currentProgress = await this.syncManager.loadProgress();
        
        if (!currentProgress.levels) {
          currentProgress.levels = {};
        }
        
        const existingLevel = currentProgress.levels[levelIndex];
        const newLevel = {
          stars,
          bestTime: gameTime,
          bestAccuracy: accuracy,
          attempts,
          errors,
          accuracy,
          timestamp: Date.now(),
          completedAt: new Date().toISOString()
        };
        
        result.improved = !existingLevel || 
          stars > existingLevel.stars || 
          (stars === existingLevel.stars && gameTime < existingLevel.bestTime);
        
        if (result.improved) {
          currentProgress.levels[levelIndex] = newLevel;
          
          if (!currentProgress.stats) {
            currentProgress.stats = {
              gamesPlayed: 0,
              totalTime: 0,
              totalErrors: 0,
              bestTime: null,
              lastPlayed: 0,
              perfectGames: 0,
              totalStars: 0
            };
          }
          
          const stats = currentProgress.stats;
          stats.gamesPlayed++;
          stats.totalTime += gameTime;
          stats.totalErrors += errors;
          stats.lastPlayed = Date.now();
          
          if (errors === 0) {
            stats.perfectGames++;
          }
          
          if (!stats.bestTime || gameTime < stats.bestTime) {
            stats.bestTime = gameTime;
          }
          
          stats.totalStars = Object.values(currentProgress.levels)
            .reduce((total, level) => total + (level.stars || 0), 0);
          
          await this.syncManager.saveProgress(currentProgress, true);
          
          result.synced = true;
          result.currentBest = newLevel;
          
          console.log('üíæ Progress saved and synced via ProgressSyncManager:', {
            level: levelIndex,
            stars,
            time: gameTime,
            improved: result.improved
          });
        } else {
          result.currentBest = existingLevel;
        }
        
      } else {
        console.warn('ProgressSyncManager not available, using fallback');
        return this.saveProgressFallback(levelIndex, gameTime, attempts, errors, accuracy);
      }
      
    } catch (error) {
      console.error('‚ùå Failed to save progress via sync manager:', error);
      result.syncError = true;
      
      try {
        const fallbackResult = this.saveProgressFallback(levelIndex, gameTime, attempts, errors, accuracy);
        result.improved = fallbackResult.improved;
        result.currentBest = fallbackResult.currentBest;
      } catch (fallbackError) {
        console.error('‚ùå Fallback save also failed:', fallbackError);
      }
    }

    return result;
  }

  // [–û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô - –≤–∫–ª—é—á–∞—è –≤—Å–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –∞–Ω–∏–º–∞—Ü–∏–π –∏ —Ç.–¥.]
  
  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É—Ä–æ–≤–Ω—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π
  restartLevel() {
    console.log('Restarting level...');
    
    // –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
    this.clearVictoryScreen();
    
    this.gameState.gameStarted = false;
    this.gameState.deck = null;
    this.gameState.cardWidth = null;
    this.gameState.cardHeight = null;
    this.gameSeed = this.generateSeed();
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    this.time.delayedCall(100, () => {
      this.startGame(this.currentLevel);
    });
  }

  // [–í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô]
  saveProgressFallback(levelIndex, gameTime, attempts, errors, accuracy) {
    try {
      const progress = this.getProgressFallback();
      
      let stars = 1;
      const errorRate = attempts > 0 ? errors / attempts : 0;
      
      if (errorRate === 0 && gameTime <= 60) stars = 3;
      else if (errorRate <= 0.2 && gameTime <= 90) stars = 2;
      
      const existingLevel = progress.levels[levelIndex];
      const newLevel = {
        stars,
        bestTime: gameTime,
        bestAccuracy: accuracy,
        attempts,
        errors,
        accuracy,
        timestamp: Date.now()
      };
