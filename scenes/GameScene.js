//---scenes/GameScene.js - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô ProgressSyncManager
window.GameScene = class GameScene extends Phaser.Scene {

  destroy() {
  console.log('GameScene cleanup started');
  
  // –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
  const timers = [
    'memorizeTimer', 'flipTimer', 'gameTimer',
    'checkTimer', 'hideTimer', 'revealTimer'
  ];
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
  timers.forEach(timerName => {
    if (this[timerName]) {
      if (typeof this[timerName].destroy === 'function') {
        this[timerName].destroy();
      } else if (typeof this[timerName].remove === 'function') {
        this[timerName].remove();
      }
      this[timerName] = null;
    }
  });
  
  // –û—á–∏—Å—Ç–∫–∞ time events
  if (this.time) {
    this.time.removeAllEvents();
  }
  
  // –û—á–∏—Å—Ç–∫–∞ tweens
  if (this.tweens) {
    this.tweens.killAll();
  }
  
  // –û—á–∏—Å—Ç–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π

  
  // –û—á–∏—Å—Ç–∫–∞ –≤–≤–æ–¥–∞
  this.input.off('pointerdown');
  this.input.off('pointerup');
  
  super.destroy();
}
  
  constructor() { 
    super('GameScene'); 
  }

  init(data) {
  // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–Ω –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞
  if (typeof data?.level === 'number') {
    console.warn('‚ö†Ô∏è Received level index instead of object, auto-converting');
    this.currentLevelIndex = data.level;
    this.currentLevel = window.LEVELS[data.level];
  } else if (data?.level && typeof data.level === 'object') {
    this.currentLevel = data.level;
    this.currentLevelIndex = data?.levelIndex ?? 0;
  } else {
    // Fallback: –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
    console.error('‚ùå No valid level provided!');
    this.currentLevel = window.LEVELS[0];
    this.currentLevelIndex = 0;
  }
  
  this.levelPage = data?.page || 0;
    
    // VK –¥–∞–Ω–Ω—ã–µ –∏–∑ PreloadScene
    this.vkUserData = data?.userData || window.VK_USER_DATA;
    this.isVKEnvironment = data?.isVK || !!window.VK_LAUNCH_PARAMS;
    
    // –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    this.syncManager = data?.syncManager || window.progressSyncManager || null;
    this.progressData = null;
    
    // –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–ª–æ–∫–∞–ª—å–Ω–∞—è + VK)
    this.achievements = this.getAchievements();
    this.vkAchievementManager = window.VKAchievementManager || null;
    

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ resize
    this.gameState = {
      deck: null,           
      openedCards: [],  
      gameStarted: false,   
      canResize: true,      
      isMemorizationPhase: false,
      currentSeed: null,
      showingVictory: false,
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç
      cardWidth: null,
      cardHeight: null
    };
    
    // –°—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã —ç–∫—Ä–∞–Ω–∞ –ø–æ–±–µ–¥—ã –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    this.victoryElements = null;
    this.victoryContainer = null;
    
    // Seed –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    this.gameSeed = this.generateSeed();
    this.gameState.currentSeed = this.gameSeed;

    // –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    this.gameMetrics = {
      startTime: null,
      attempts: 0,
      errors: 0,
      pairs: 0,
      level: this.currentLevel,
      timeToFirstMatch: null,
      matchTimes: [],
      levelIndex: this.currentLevelIndex
    };

    console.log('GameScene init:', {
      isVK: this.isVKEnvironment,
      hasVKUser: !!this.vkUserData,
      hasVKAchievements: !!this.vkAchievementManager,
      hasSyncManager: !!this.syncManager,
      seed: this.gameSeed,
      levelIndex: this.currentLevelIndex
    });
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ seed
  generateSeed() {
    const urlParams = new URLSearchParams(window.location.search);
    const urlSeed = urlParams.get('seed');
    
    if (urlSeed) {
      return parseInt(urlSeed, 36);
    }
    
    const levelHash = this.currentLevel ? 
      (this.currentLevel.cols * 1000 + this.currentLevel.rows) : 1;
    return (Date.now() + levelHash) % 2147483647;
  }

  // –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ
  seededRandom(seed) {
    const x = Math.sin(seed) * 10000;
    return x - Math.floor(x);
  }

  shuffleWithSeed(array, seed) {
    const result = [...array];
    let currentSeed = seed;
    
    for (let i = result.length - 1; i > 0; i--) {
      currentSeed = (currentSeed * 1103515245 + 12345) & 0x7fffffff;
      const j = Math.floor(this.seededRandom(currentSeed) * (i + 1));
      [result[i], result[j]] = [result[j], result[i]];
    }
    return result;
  }

  _pxClamp(px, minPx, maxPx) { 
    return Math.round(Phaser.Math.Clamp(px, minPx, maxPx)); 
  }
  
  _pxByH(fraction, minPx, maxPx) { 
    const { H } = this.getSceneWH(); 
    return this._pxClamp(H * fraction, minPx, maxPx); 
  }
  
  getDPR() { 
    return Math.min(2.0, Math.max(1, (window.devicePixelRatio || 1))); 
  }

  preload() {}

  async create() {
    try {
    await document.fonts.ready;
    console.log('‚úÖ Fonts ready');
  } catch (error) {
    console.warn('‚ö†Ô∏è Fonts API not available:', error);
    // Fallback: –ø—Ä–æ—Å—Ç–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    await new Promise(resolve => setTimeout(resolve, 300));
  }
  try {
    // ===== 1. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–û–í–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–• =====
    if (this.scale && this.scale.updateBounds) {
      this.scale.updateBounds();
    }
    
    // –ë–∞–∑–æ–≤—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    this.levelButtons = [];
    this.cards = [];

    // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
    if (this.cardsContainer) {
      this.cardsContainer.destroy(true);
      this.cardsContainer = null;
    }
    
    this.opened = [];
    
    // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    this.canClick = false;
    this._processingCards = false; // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –Ø–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    this._lastClickTime = 0; // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
    
    // –°—á—ë—Ç—á–∏–∫–∏
    this.mistakeCount = 0;
    this.currentTimeSeconds = 0;
    
    // UI —ç–ª–µ–º–µ–Ω—Ç—ã (null –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    this.hud = null;
    this.mistakeText = null;
    this.timeText = null;
    this.bgImage = null;
    
    // –¢–∞–π–º–µ—Ä—ã (–≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏)
    this.gameTimer = null;
    this.memorizeTimer = null;
    this.flipTimer = null;
    this.revealTimer = null;
    this.memorizeController = null; // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: AbortController

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this._resizeHandler = null;
    this._wheelHandler = null;
    
    // –§–ª–∞–≥–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
    this._fontsReady = false;
    this._lastTapTime = 0;
    
    // ===== 2. –û–ñ–ò–î–ê–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –†–ï–°–£–†–°–û–í =====

    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –î–µ—Ç–µ–∫—Ç–æ—Ä long tasks (–ø–µ—Ä–≤—ã–µ 5 —Å–µ–∫—É–Ω–¥)
    if (window.PerformanceObserver) {
      const po = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (entry.duration > 200) {
            console.warn(`‚ö†Ô∏è Long task detected: ${entry.duration}ms`, entry.name);
          }
        }
      });
      
      try {
        po.observe({ entryTypes: ['longtask'] });
        
        // –û—Ç–∫–ª—é—á–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        this.time.delayedCall(5000, () => po.disconnect());
      } catch (e) {
        // –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç longtask
        console.log('‚ÑπÔ∏è PerformanceObserver not supported');
      }
    }
    
    // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫—É —à—Ä–∏—Ñ—Ç–æ–≤ –î–û –ª—é–±–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
    if (document.fonts && document.fonts.ready) {
      await document.fonts.ready;
      this._fontsReady = true;
      console.log('‚úÖ Fonts loaded and ready');
    }

    // –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã
    await this.drawHUD();
    
    // ===== 3. –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–ï–ù–ï–î–ñ–ï–†–û–í =====
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ë–ï–ó –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    this.initializeSyncManager().then(() => {
      console.log('‚úÖ Sync manager initialized');
    }).catch(error => {
      console.warn('‚ö†Ô∏è Sync manager failed, using local storage:', error);
    });
    
    // ===== 4. –ü–û–î–ì–û–¢–û–í–ö–ê –í–ò–ó–£–ê–õ–¨–ù–´–• –†–ï–°–£–†–°–û–í =====
    
    // –°–æ–∑–¥–∞—ë–º –∑–∞–≥–ª—É—à–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    this.makePlaceholdersIfNeeded();
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ–æ–Ω–∞
    this.ensureGradientBackground();
    
    // ===== 5. –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –ó–ê–ü–£–°–ö –ò–ì–†–´ =====
    
    if (!this.currentLevel || !this.currentLevel.cols || !this.currentLevel.rows) {
  console.error('‚ùå Invalid level data:', this.currentLevel);
  console.error('Data received:', this.currentLevel);
  console.error('Available levels:', window.LEVELS?.length || 0);
  
  // ‚úÖ –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
  if (this.currentLevelIndex >= 0 && window.LEVELS[this.currentLevelIndex]) {
    console.log('üîß Attempting recovery with levelIndex:', this.currentLevelIndex);
    this.currentLevel = window.LEVELS[this.currentLevelIndex];
  } else {
    console.error('‚ùå Cannot recover, returning to menu');
    this.scene.start('MenuScene', { page: this.levelPage || 0 });
    return;
  }
}
    
    // ===== 6. ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ï–î–ò–ù–´–ô RESIZE HANDLER –° DEBOUNCE =====
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ü–ï–†–ï–î –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–π
    this.scale.off('resize');

    // –°–æ–∑–¥–∞—ë–º debounced handler (200ms –∑–∞–¥–µ—Ä–∂–∫–∞)
    let resizeTimeout = null;

    this._resizeHandler = () => {
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
      if (resizeTimeout) {
        clearTimeout(resizeTimeout);
        resizeTimeout = null;
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
      resizeTimeout = setTimeout(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å resize
        if (!this.gameState || !this.gameState.canResize) {
          console.log('‚ö†Ô∏è Resize blocked during critical phase');
          return;
        }
        
        console.log('üîç Resize executing after debounce');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º bounds
        if (this.scale && this.scale.updateBounds) {
          this.scale.updateBounds();
        }
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ñ–æ–Ω
        this.ensureGradientBackground();
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º layout —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (this.gameState.gameStarted || this.gameState.isMemorizationPhase) {
          this.saveGameState();
          this.redrawLayout();
        } else if (this.cards.length === 0) {
          // –ï—Å–ª–∏ –∏–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞
          this.startGame(this.currentLevel);
        }
        
        resizeTimeout = null;
      }, 200); // 200ms debounce
    };

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –û–î–ò–ù —Ä–∞–∑
    this.scale.on('resize', this._resizeHandler, this);
    
    // ===== 7. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–ß–ò–°–¢–ö–ò =====
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏
    this.events.once('shutdown', () => {
      console.log('üßπ Scene shutdown - cleaning up');
      
      // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–º–µ–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      if (this.memorizeController) {
        this.memorizeController.abort();
        this.memorizeController = null;
      }
      
      // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º resize timeout –µ—Å–ª–∏ –µ—Å—Ç—å
      if (resizeTimeout) {
        clearTimeout(resizeTimeout);
        resizeTimeout = null;
      }
      
      this.cleanup();
    });
    
    this.events.once('destroy', () => {
      console.log('üí• Scene destroy - full cleanup');
      this.cleanup();
    });
    
    // ===== 8. –ë–ï–ó–û–ü–ê–°–ù–´–ô –ó–ê–ü–£–°–ö –ò–ì–†–´ =====
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
    requestAnimationFrame(() => {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      this.startGame(this.currentLevel);
    });
    
    console.log('‚úÖ GameScene created successfully');
    
  } catch (error) {
    console.error('‚ùå Critical error in GameScene.create:', error);
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback –Ω–∞ –º–µ–Ω—é
    this.time.delayedCall(100, () => {
      this.scene.start('MenuScene', { page: this.levelPage || 0 });
    });
  }
}

// –ù–û–í–´–ô –ú–ï–¢–û–î: –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
async initializeSyncManager() {
  try {
    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (window.progressSyncManager) {
      this.syncManager = window.progressSyncManager;
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ VK
    const isVK = window.VK_BRIDGE_READY && window.vkBridge;
    
    if (isVK) {
      
      // –í VK - —Å–æ–∑–¥–∞—ë–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
      if (window.ProgressSyncManager) {
  this.syncManager = new window.ProgressSyncManager();
} else {
  // fallback
}
      this.syncManager = new ProgressSyncManager();
      window.progressSyncManager = this.syncManager;
    } else {
      // –í–Ω–µ VK - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ localStorage
      console.log('üì± Running outside VK - local storage only');
      this.syncManager = {
        loadProgress: () => this.loadProgressLocal(),
        saveProgress: (data) => this.saveProgressLocal(data),
        isVKAvailable: () => false
      };
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    if (this.syncManager) {
      this.progressData = await this.syncManager.loadProgress();
    }
    
  } catch (error) {
    console.warn('‚ö†Ô∏è Sync manager initialization failed:', error);
    // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    this.progressData = this.loadProgressLocal();
  }
}

// –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
cleanup() {
  console.log('üßπ GameScene cleanup started');
  
  // ===== 1. –û–ß–ò–°–¢–ö–ê –¢–ê–ô–ú–ï–†–û–í =====
  if (this.memorizeTimer) {
    clearTimeout(this.memorizeTimer);
    this.memorizeTimer = null;
  }
  
  const timers = [
    'memorizeTimer', 'flipTimer', 'gameTimer',
    'revealTimer', 'checkTimer', 'hideTimer'
  ];
  
  timers.forEach(timerName => {
    if (this[timerName]) {
      if (typeof this[timerName].destroy === 'function') {
        this[timerName].destroy();
      } else if (typeof this[timerName].remove === 'function') {
        this[timerName].remove();
      } else if (typeof this[timerName] === 'number') {
        clearTimeout(this[timerName]);
      }
      this[timerName] = null;
    }
  });
  
  // ===== 2. –û–ß–ò–°–¢–ö–ê TIME EVENTS =====
  if (this.time) {
    this.time.removeAllEvents();
  }
  
  // ===== 3. –û–ß–ò–°–¢–ö–ê TWEENS =====
  if (this.tweens) {
    this.tweens.killAll();
  }
  
  // ===== 4. ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –°–ë–†–û–° –§–õ–ê–ì–û–í –ë–õ–û–ö–ò–†–û–í–ö–ò =====
  this.canClick = false;
  this._processingCards = false; // ‚Üê üîß FIX #1: –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£!
  this.gameStarted = false;
  this.isMemorizationPhase = false;
  
  // ===== 5. –û–ß–ò–°–¢–ö–ê –°–õ–£–®–ê–¢–ï–õ–ï–ô =====
  if (this._wheelHandler && this.input) {
    this.input.off('wheel', this._wheelHandler);
    this._wheelHandler = null;
  }
  
  if (this.input) {
    this.input.off('pointerdown');
    this.input.off('pointerup');
    this.input.off('pointermove');
  }
  
  // ===== 6. ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –û–ß–ò–°–¢–ö–ê –ö–ê–†–¢ + –°–ù–Ø–¢–ò–ï isAnimating =====
  if (this.cards && Array.isArray(this.cards)) {
    this.cards.forEach(card => {
      if (card && card.scene) {
        card.setData('isAnimating', false); // ‚Üê üîß FIX #4: –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£!
        card.removeAllListeners();
        card.destroy();
      }
    });
    this.cards = [];
  }
  
  // ===== 7. ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –£–ù–ò–ß–¢–û–ñ–ï–ù–ò–ï –ö–û–ù–¢–ï–ô–ù–ï–†–ê =====
  if (this.cardsContainer && this.cardsContainer.scene) { // ‚Üê üîß FIX #5: –ü—Ä–æ–≤–µ—Ä–∫–∞ scene
    this.cardsContainer.destroy(true);
    this.cardsContainer = null;
  }
  
  // ===== 8. –û–ß–ò–°–¢–ö–ê UI =====
  const uiElements = [
    'hud', 'mistakeText', 'timeText', 'bgImage',
    'exitBtn', 'victoryContainer'
  ];
  
  uiElements.forEach(elementName => {
    if (this[elementName] && this[elementName].destroy) {
      this[elementName].destroy();
      this[elementName] = null;
    }
  });
  
  // ===== 9. –û–ß–ò–°–¢–ö–ê –ú–ê–°–°–ò–í–û–í =====
  this.opened = [];
  this.levelButtons = [];
  
  // ===== 10. –°–ë–†–û–° –°–û–°–¢–û–Ø–ù–ò–Ø =====
  if (this.gameState) {
    this.gameState.canResize = true;
    this.gameState.gameStarted = false;
    this.gameState.isMemorizationPhase = false;
  }
  
  // ===== 11. –û–¢–ü–ò–°–ö–ê –û–¢ RESIZE =====
  if (this._resizeHandler) { // ‚Üê üîß FIX #3: –ü—Ä–æ–≤–µ—Ä–∫–∞ handler
    this.scale.off('resize', this._resizeHandler);
    this._resizeHandler = null;
  }
  
  console.log('‚úÖ GameScene cleanup completed');
}

  

  // –ù–û–í–´–ô –ú–ï–¢–û–î: Fallback –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  getProgressFallback() {
    try {
      const saved = localStorage.getItem('findpair_progress');
      const parsed = saved ? JSON.parse(saved) : {};
      return parsed.levels ? parsed : { levels: parsed };
    } catch (error) {
      console.warn('Error loading fallback progress:', error);
      return { levels: {} };
    }
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
  setCardSize(card, width, height) {
  if (!card || !card.scene || !card.texture) return;
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–µ–∫—Å—Ç—É—Ä—ã
  const source = card.texture.source;
  if (!source || !source[0]) {
    console.warn('Card texture not ready');
    return;
  }
  
  const originalWidth = source[0].width || 100;
  const originalHeight = source[0].height || 100;
  
  const scaleX = width / originalWidth;
  const scaleY = height / originalHeight;
  
  card.setScale(scaleX, scaleY);
  card.setData('targetWidth', width);
  card.setData('targetHeight', height);
  card.setData('scaleX', scaleX);
  card.setData('scaleY', scaleY);
}

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
  restoreCardSize(card) {
    if (!card || !card.scene) return;
    
    const targetWidth = card.getData('targetWidth');
    const targetHeight = card.getData('targetHeight');
    
    if (targetWidth && targetHeight) {
      this.setCardSize(card, targetWidth, targetHeight);
    } else if (this.gameState.cardWidth && this.gameState.cardHeight) {
      this.setCardSize(card, this.gameState.cardWidth, this.gameState.cardHeight);
    }
  }

  // –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ï–¢–û–î: –°–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã –∫–∞—Ä—Ç—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
  setCardTexture(card, textureKey) {
    if (!card || !card.scene) return;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã
    const targetWidth = card.getData('targetWidth') || this.gameState.cardWidth;
    const targetHeight = card.getData('targetHeight') || this.gameState.cardHeight;
    
    // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É
    card.setTexture(textureKey);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
    if (targetWidth && targetHeight) {
      this.setCardSize(card, targetWidth, targetHeight);
    }
  }



  // –ù–û–í–´–ô –ú–ï–¢–û–î: –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –ø–æ–±–µ–¥—ã
  clearVictoryScreen() {
  console.log('Clearing victory screen...');
  
  // ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –£–¥–∞–ª—è–µ–º –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  if (this.victoryContainer && this.victoryContainer.scene) {
    this.victoryContainer.destroy(true); // ‚Üê destroyChildren = true
    this.victoryContainer = null;
  }
  
  // ‚ö†Ô∏è FALLBACK: –£–¥–∞–ª—è–µ–º orphan —ç–ª–µ–º–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º depth
  const toDestroy = [];
  if (this.children && this.children.list) {
    this.children.list.forEach(child => {
      if (child && child.depth >= 100 && child !== this.victoryContainer) {
        toDestroy.push(child);
      }
    });
  }
  
  toDestroy.forEach(child => {
    if (child && child.scene && typeof child.destroy === 'function') {
      try {
        child.destroy();
      } catch (e) {
        console.warn('Error destroying orphan element:', e);
      }
    }
  });
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
  if (this.gameState) {
    this.gameState.showingVictory = false;
  }
  
  console.log('Victory screen cleared');
}

  

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  saveGameState() {
    if (!this.cards.length) return;
    
    this.gameState.openedCards = this.cards
      .map((card, index) => ({
        index,
        key: card.getData('key'),
        opened: card.getData('opened'),
        matched: card.getData('matched')
      }))
      .filter(cardData => cardData.opened || cardData.matched);
      
    console.log('Game state saved:', this.gameState.openedCards.length, 'special cards');
  }

  // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ layout –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
  async redrawLayout() {
    if (!this.gameState.deck || !this.currentLevel) {
      console.warn('Cannot redraw: missing deck or level');
      return;
    }

    console.log('Redrawing layout with preserved state...');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const currentOpenedState = this.cards.map(card => ({
      opened: card.getData('opened'),
      matched: card.getData('matched')
    }));

    const wasMemorizing = this.gameState.isMemorizationPhase;
    const currentTime = this.currentTimeSeconds;
    const wasGameStarted = this.gameState.gameStarted;

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    this.stopAllActiveProcesses();
    
    // –û—á–∏—â–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ
    this.clearVisualElements();
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã —Å —Ç–µ–º –∂–µ deck
    this.createCardLayout(this.gameState.deck);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç
    this.cards.forEach((card, index) => {
      if (currentOpenedState[index]) {
        card.setData('opened', currentOpenedState[index].opened);
        card.setData('matched', currentOpenedState[index].matched);
        
        // –í–∏–∑—É–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (wasMemorizing || currentOpenedState[index].opened || currentOpenedState[index].matched) {
          this.setCardTexture(card, card.getData('key'));
        } else {
          this.setCardTexture(card, 'back');
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if (currentOpenedState[index].matched) {
          card.setAlpha(window.THEME.cardDimAlpha).disableInteractive();
        } else if (!wasMemorizing && wasGameStarted) {
          card.setInteractive({ useHandCursor: true });
        }
      }
    });
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    this.gameState.gameStarted = wasGameStarted;
    this.gameState.isMemorizationPhase = wasMemorizing;
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º HUD
    await this.drawHUD().catch(console.error);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    if (wasGameStarted && !wasMemorizing) {
      this.currentTimeSeconds = currentTime;
      if (this.timeText) {
        this.timeText.setText(this.formatTime(this.currentTimeSeconds));
      }
      this.startGameTimer();
    }
    
    console.log('Layout redrawn, game state preserved');
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
  stopAllActiveProcesses() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    this.stopGameTimer();
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if (this.memorizeTimer) {
      this.memorizeTimer.destroy();
      this.memorizeTimer = null;
    }
    
    if (this.flipTimer) {
      this.flipTimer.destroy();
      this.flipTimer = null;
    }
    
    // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏
    if (this.time && this.time.delayedCall) {
      this.time.removeAllEvents();
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    this.canClick = false;
    this._processingCards = false;
    
    // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç
    this.opened = [];
  }

  // –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  clearVisualElements() {
    // –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥—ã –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    this.clearVictoryScreen();
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç
    if (this.cards && Array.isArray(this.cards)) {
      this.cards.forEach(card => {
        if (card && card.scene) {
          card.destroy();
        }
      });
    }
    this.cards = [];
    
    this.clearHUD();
  }

  getSceneWH() {
    const s = this.scale, cam = this.cameras?.main;
    const W = (s && (s.width ?? s.gameSize?.width)) || cam?.width || this.sys.game.config.width || 800;
    const H = (s && (s.height ?? s.gameSize?.height)) || cam?.height || this.sys.game.config.height || 600;
    return { W: Math.floor(W), H: Math.floor(H) };
  }

  // –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  getAchievements() {
    if (this.vkAchievementManager) {
      return this.vkAchievementManager.achievements;
    }
    
    const saved = localStorage.getItem('findpair_achievements');
    return saved ? JSON.parse(saved) : {
      first_win: false,
      perfect_game: false,
      speed_runner: false,
      persistent: false,
      expert: false
    };
  }

  async saveAchievements() {
    try {
      if (this.vkAchievementManager) {
        this.vkAchievementManager.achievements = this.achievements;
        await this.vkAchievementManager.saveAchievements();
      } else {
        localStorage.setItem('findpair_achievements', JSON.stringify(this.achievements));
      }
    } catch (error) {
      console.warn('Failed to save achievements:', error);
      localStorage.setItem('findpair_achievements', JSON.stringify(this.achievements));
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  formatTime(seconds) {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return mins > 0 ? `${mins}:${secs.toString().padStart(2, '0')}` : `${secs}—Å`;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HUD —Å —Ç–∞–π–º–µ—Ä–æ–º
  async drawHUD() {
if (document.fonts && !this._fontsReady) {
    await document.fonts.ready;
    this._fontsReady = true;
  }
    
    this.clearHUD();
    const { W, H } = this.getSceneWH();
    const hudH = Math.min(100, Math.round(H * 0.12));

    // –§–æ–Ω HUD
    const hud = this.add.graphics().setDepth(5);
    hud.fillStyle(0x000000, 0.85);
    hud.fillRoundedRect(0, 0, W, hudH, 0);
    this.hud = hud;

    const fontSize = this._pxByH(0.035, 14, 20);

    // –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å–ª–µ–≤–∞
    this.mistakeText = this.add.text(20, hudH/2, '–û—à–∏–±–æ–∫: ' + this.mistakeCount, {
      fontFamily: 'Arial, sans-serif', fontSize: fontSize + 'px', color: '#FF6B6B', fontStyle: 'bold'
    }).setOrigin(0, 0.5).setDepth(6);

    // –¢–∞–π–º–µ—Ä –ø–æ —Ü–µ–Ω—Ç—Ä—É
    this.timeText = this.add.text(W/2, hudH/2, this.formatTime(this.currentTimeSeconds), {
      fontFamily: 'Arial, sans-serif', fontSize: (fontSize + 2) + 'px', color: '#4ECDC4', fontStyle: 'bold'
    }).setOrigin(0.5, 0.5).setDepth(6);

    // –ö–Ω–æ–ø–∫–∞ –¥–æ–º–æ–π —Å–ø—Ä–∞–≤–∞
    const size = Math.round(hudH * 0.76);
    const homeBtn = window.makeIconButton(
      this, W - (size/2 + 14), Math.round(hudH/2), size,
      '‚åÇ',
      () => { 
        this.stopGameTimer();
        this.scene.start('MenuScene', { page: this.levelPage }); 
      }
    );
    homeBtn.setDepth(7);
    this.exitBtn = homeBtn;
  }

  clearHUD() {
    if (this.hud && this.hud.scene) this.hud.destroy();
    if (this.mistakeText && this.mistakeText.scene) this.mistakeText.destroy();
    if (this.timeText && this.timeText.scene) this.timeText.destroy();
    if (this.exitBtn && this.exitBtn.scene) this.exitBtn.destroy();
    this.hud = this.mistakeText = this.timeText = this.exitBtn = null;
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–º
  startGameTimer() {
    if (this.gameTimer) {
      this.gameTimer.destroy();
      this.gameTimer = null;
    }
    
    this.gameTimer = this.time.addEvent({
      delay: 1000,
      callback: () => {
        this.currentTimeSeconds++;
        if (this.timeText && this.timeText.scene) {
          this.timeText.setText(this.formatTime(this.currentTimeSeconds));
        }
      },
      loop: true
    });
  }

  stopGameTimer() {
    if (this.gameTimer) {
      this.gameTimer.destroy();
      this.gameTimer = null;
    }
  }

 async startGame(level) {
    console.log('Starting game with level:', level);
    
    if (!level || !level.cols || !level.rows) {
      console.error('Invalid level data:', level);
      this.scene.start('MenuScene', { page: this.levelPage });
      return;
    }
       
    this.currentLevel = level;
    this.mistakeCount = 0;
    this.currentTimeSeconds = 0;

    const total = level.cols * level.rows;
    if (total % 2 !== 0) {
      console.error('–ù–µ—á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ —è—á–µ–µ–∫ –≤ —Å–µ—Ç–∫–µ', level);
      this.scene.start('MenuScene', { page: this.levelPage });
      return;
    }



    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–≥—Ä—ã
    this.gameMetrics = {
      startTime: null, // –°—Ç–∞—Ä—Ç—É–µ—Ç –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç
      attempts: 0,
      errors: 0,
      pairs: Math.floor(total / 2),
      level: level,
      levelIndex: this.currentLevelIndex, // –î–û–ë–ê–í–õ–ï–ù–û
      timeToFirstMatch: null,
      matchTimes: []
    };  

    // –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–ª–æ–¥—ã
    if (!this.gameState.deck || this.gameState.currentSeed !== this.gameSeed) {
      const pairs = Math.floor(total / 2);
      const shuffledKeys = this.shuffleWithSeed([...window.ALL_CARD_KEYS], this.gameSeed);
      const base = Array.from({length: pairs}, (_, i) => 
        shuffledKeys[i % shuffledKeys.length]);
      
      this.gameState.deck = this.shuffleWithSeed(
        base.concat(base), 
        this.gameSeed + 1000
      );
      
      this.gameState.currentSeed = this.gameSeed;
      
      console.log('Generated deterministic deck with seed:', this.gameSeed);
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    this.stopAllActiveProcesses();
    this.clearVisualElements();
    this.ensureGradientBackground();
    
    this.opened = [];
    this.canClick = false;
    this.gameState.gameStarted = false;
    this.gameState.isMemorizationPhase = true;
    this.gameState.canResize = false; // –ë–ª–æ–∫–∏—Ä—É–µ–º resize –Ω–∞ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞

    await this.drawHUD().catch(console.error);
    this.createCardLayout(this.gameState.deck);

    // 5-—Å–µ–∫—É–Ω–¥–Ω—ã–π –ø–æ–∫–∞–∑ –∫–∞—Ä—Ç –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    this.showCardsForMemorization();
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ layout –∫–∞—Ä—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ä–∞–∑–º–µ—Ä–æ–≤
// GameScene.js:980 - –ó–ê–ú–ï–ù–ò–¢–¨ –í–°–Æ –§–£–ù–ö–¶–ò–Æ createCardLayout

createCardLayout(deck) {
  // ‚úÖ FIX #1: –°–æ–∑–¥–∞—ë–º fallback responsiveManager
  const rm = window.responsiveManager || {
    getAdaptiveFontSize: (base, min, max) => {
      const { H } = this.getSceneWH();
      const size = Math.floor(H * (base / 1000)); // base –≤ –ø—Ä–æ–º–∏–ª–ª–µ –æ—Ç –≤—ã—Å–æ—Ç—ã
      return Math.min(max, Math.max(min, size));
    },
    // ResponsiveManager.js:95
    // ‚úÖ –í–ê–†–ò–ê–ù–¢ 1: –£–º–µ–Ω—å—à–∏—Ç—å –≤—ã—Å–æ—Ç—É HUD (–±–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –¥–ª—è –∫–∞—Ä—Ç)
if (!this.cachedCardParams || 
    this.cachedCardParams.containerW !== W || 
    this.cachedCardParams.containerH !== H - hudH) {
  
  this.cachedCardParams = rm.getCardDimensions(
    this.currentLevel,
    W,
    H - hudH
  );
  this.cachedCardParams.containerW = W;
  this.cachedCardParams.containerH = H - hudH;
}

const cardParams = this.cachedCardParams;
    //////////////////////////////////////////////////////////
  };
  
  // ‚úÖ FIX #5: –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
  if (this._isCreatingLayout) {
    console.warn('‚ö†Ô∏è createCardLayout already in progress, skipping');
    return;
  }
  this._isCreatingLayout = true;
  
  const { width: W, height: H } = this.scale;
  const hudH = rm.getAdaptiveFontSize(80, 60, 100);
  
  const cardParams = rm.getCardDimensions(
    this.currentLevel,
    W,
    H - hudH
  );
  
  // –ö–µ—à–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã
  this.cachedCardParams = cardParams;
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  if (this.cardsContainer) {
    this.cardsContainer.destroy(true);
  }
  
  this.cardsContainer = this.add.container(0, hudH);
  this.cards = []; // ‚Üê –î–û–ë–ê–í–ò–¢–¨: –û—á–∏—Å—Ç–∫–∞ –º–∞—Å—Å–∏–≤–∞ –∫–∞—Ä—Ç
  
  // –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—ã
  for (let row = 0; row < this.currentLevel.rows; row++) {
    for (let col = 0; col < this.currentLevel.cols; col++) {
      const index = row * this.currentLevel.cols + col;
      const key = deck[index];
      
      const x = cardParams.offsetX + col * (cardParams.cardW + cardParams.gapSize) + cardParams.cardW / 2;
      const y = cardParams.offsetY + row * (cardParams.cardH + cardParams.gapSize) + cardParams.cardH / 2;
      
      const card = this.add.image(x, y, key)
        .setData('key', key)
        .setData('opened', false)
        .setData('matched', false)
        .setData('index', index)
        .setInteractive({ useHandCursor: true })
        .off('pointerdown') // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        .on('pointerdown', (pointer, localX, localY, event) => {
          this.onCardClick(card, event); // ‚Üê –ü–µ—Ä–µ–¥–∞—ë–º event
        });
      
      this.setCardSize(card, cardParams.cardW, cardParams.cardH);
      this.cardsContainer.add(card);
      this.cards.push(card);
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  this.gameState.cardWidth = cardParams.cardW;
  this.gameState.cardHeight = cardParams.cardH;
  this.gameState.gapSize = cardParams.gapSize;
  
  this._isCreatingLayout = false; // ‚Üê –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º—å—é—Ç–µ–∫—Å
}

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ viewport
getSceneWH() {
    // –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º scale –≤–º–µ—Å—Ç–æ game.config
    const { width, height } = this.scale;
    return { W: width, H: height };
}

// –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ï–¢–û–î: –û–±—Ä–∞–±–æ—Ç–∫–∞ resize
handleResize(gameSize) {
  // –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É:
  if (!this.gameState || !this.cardsContainer) {
    return;
  }
    console.log('Resize to:', gameSize.width, 'x', gameSize.height);
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º layout —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
    if (!this.gameState.gameStarted && !this.gameState.isMemorizationPhase) {
        this.createCardLayout(this.gameState.deck);
    } else if (this.cardsContainer) {
        // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ—Å—Ç–æ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ
        const { width: W, height: H } = gameSize;
        const hudH = Math.min(80, Math.round(H * 0.1));
        const gameAreaH = H - hudH - 10;
        
        const totalW = this.gameState.cardWidth * this.currentLevel.cols + 
                       this.gameState.gapSize * (this.currentLevel.cols - 1);
        const totalH = this.gameState.cardHeight * this.currentLevel.rows + 
                       this.gameState.gapSize * (this.currentLevel.rows - 1);
        
        const scaleX = W / totalW * 0.95;
        const scaleY = gameAreaH / totalH * 0.95;
        const scale = Math.min(scaleX, scaleY, 1);
        
        this.cardsContainer.setScale(scale);
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.cardsContainer.x = (W - totalW * scale) / 2;
        this.cardsContainer.y = hudH + (gameAreaH - totalH * scale) / 2;
    }
}

  // 5-—Å–µ–∫—É–Ω–¥–Ω—ã–π –ø–æ–∫–∞–∑ –∫–∞—Ä—Ç –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  showCardsForMemorization() {
    console.log('Showing cards for memorization (5 seconds)...');
    
    const { W, H } = this.getSceneWH();
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º resize –≤–æ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç
    this.gameState.canResize = false;
    this.gameState.isMemorizationPhase = true;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –ª–∏—Ü–æ–º (–æ–Ω–∏ —É–∂–µ —Ç–∞–∫–∏–µ –ø–æ—Å–ª–µ createCardLayout)
    this.cards.forEach(card => {
      this.setCardTexture(card, card.getData('key'));
      card.disableInteractive(); // –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–∫–∏ –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = this.add.text(W/2, H*0.15, '–ó–∞–ø–æ–º–Ω–∏—Ç–µ –∫–∞—Ä—Ç—ã!', {
      fontFamily: 'Arial, sans-serif',
      fontSize: this._pxByH(0.05, 24, 32) + 'px',
      color: '#FFD700',
      fontStyle: 'bold'
    }).setOrigin(0.5).setDepth(1000);

    // –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç
    let countdown = 5;
    const countdownText = this.add.text(W/2, H*0.22, countdown.toString(), {
      fontFamily: 'Arial, sans-serif',
      fontSize: this._pxByH(0.08, 36, 48) + 'px',
      color: '#FF4444',
      fontStyle: 'bold'
    }).setOrigin(0.5).setDepth(1000);

    // AbortController –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–º–µ–Ω—ã
  this.memorizeController = new AbortController();

    // –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞
    this.memorizeTimer = this.time.addEvent({
      delay: 1000,
      repeat: 4,
      callback: () => {
        if (this.memorizeController.signal.aborted) {
        this.memorizeTimer.remove();
        return;
      }
        countdown--;
        if (countdown > 0) {
          countdownText.setText(countdown.toString());
          // –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏
          this.tweens.add({
            targets: countdownText,
            scale: 1.3,
            duration: 200,
            yoyo: true,
            ease: 'Power2'
          });
        } else {
          // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞
          notification.destroy();
          countdownText.destroy();
          
          // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã
          this.flipAllCardsAndStartGame();
        }
      }
    });
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –∫–∞—Ä—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–æ–≤
  flipAllCardsAndStartGame() {
    console.log('Flipping all cards and starting game...');
    
    // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–æ–≤
    this.cards.forEach((card, index) => {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—Ä–∞—Ö –ø–µ—Ä–µ–¥ –∞–Ω–∏–º–∞—Ü–∏–µ–π
      const targetWidth = card.getData('targetWidth');
      const targetHeight = card.getData('targetHeight');
      const scaleX = card.getData('scaleX');
      const scaleY = card.getData('scaleY');
      
      this.tweens.add({
        targets: card,
        scaleX: 0,
        duration: 200,
        delay: index * 30,
        ease: 'Power2.easeIn',
        onComplete: () => {
          // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –Ω–∞ –∑–∞–¥–Ω—é—é —Å—Ç–æ—Ä–æ–Ω—É
          this.setCardTexture(card, 'back');
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
          this.tweens.add({
            targets: card,
            scaleX: scaleX, // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–±
            duration: 200,
            ease: 'Power2.easeOut'
          });
        }
      });
    });

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞
    this.flipTimer = this.time.delayedCall(1000, () => {
      // –í–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç
      this.cards.forEach(card => {
        card.setInteractive({ useHandCursor: true });
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
        this.restoreCardSize(card);
      });
      
      this.canClick = true;
      this.gameState.gameStarted = true;
      this.gameState.isMemorizationPhase = false;
      this.gameState.canResize = true;
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∏–≥—Ä—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç
      this.gameMetrics.startTime = Date.now();
      this.startGameTimer();
      
      console.log('Game fully started, timer running, clicks enabled');
    });
  }

  // ‚úÖ –ù–û–í–´–ô –ö–û–î:
onCardClick(card, event) { // ‚Üê –î–æ–±–∞–≤–∏—Ç—å event –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
  if (event) {
    if (event.preventDefault) event.preventDefault();
    if (event.stopPropagation) event.stopPropagation();
  }
  
  // –¢–†–û–ô–ù–ê–Ø –ó–ê–©–ò–¢–ê –æ—Ç race conditions
  if (!this.canClick || this._processingCards) {
    console.log('‚ö†Ô∏è Click ignored: canClick =', this.canClick, ', processing =', this._processingCards);
    return;
  }
  if (card.getData('opened') || card.getData('matched')) {
    console.log('‚ö†Ô∏è Click ignored: card already opened/matched');
    return;
  }
  if (card.getData('isAnimating')) {
    console.log('‚ö†Ô∏è Click ignored: card is animating');
    return;
  }
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢—Ä–æ–π–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç race conditions
  if (!this.canClick || this._processingCards) return;
  if (card.getData('opened') || card.getData('matched')) return;
  if (card.getData('isAnimating')) return; // –ù–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  
  const now = Date.now();
  if (this._lastClickTime && now - this._lastClickTime < 300) {
    return;
  }
  
  // –ü–æ–º–µ—á–∞–µ–º –∫–∞—Ä—Ç—É –∫–∞–∫ –∞–Ω–∏–º–∏—Ä—É—é—â—É—é—Å—è
  card.setData('isAnimating', true);
  this._lastClickTime = now;
  this._processingCards = true;
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞
  this.tweens.add({
    targets: card,
    scaleX: 0,
    duration: 150,
    onComplete: () => {
      this.setCardTexture(card, card.getData('key'));
      this.tweens.add({
        targets: card,
        scaleX: card.getData('scaleX') || 1,
        duration: 150,
        onComplete: () => {
          card.setData('isAnimating', false);
          card.setData('opened', true);
          this.opened.push(card);
          
          if (this.opened.length === 2) {
            this.checkPair();
          } else {
            this._processingCards = false;
          }
        }
      });
    }
  });
}


checkPair() {
  if (this.opened.length !== 2) return;
  
  const [card1, card2] = this.opened;
  this.gameMetrics.attempts++;
  
  // –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–ª–∏–∫–∏ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  this.canClick = false;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  if (card1.getData('key') === card2.getData('key')) {
    // ‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï
    console.log('Match found!');
    
    // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ
    card1.setData('matched', true);
    card2.setData('matched', true);
    
    // –ó–∞—Ç–µ–º–Ω—è–µ–º –∫–∞—Ä—Ç—ã
    card1.setAlpha(window.THEME?.cardDimAlpha || 0.5).disableInteractive();
    card2.setAlpha(window.THEME?.cardDimAlpha || 0.5).disableInteractive();
    
    // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö
    this.opened = [];
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–∏
    this._processingCards = false;
    this.canClick = true;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    if (!this.gameMetrics.timeToFirstMatch) {
      this.gameMetrics.timeToFirstMatch = Date.now() - this.gameMetrics.startTime;
    }
    this.gameMetrics.matchTimes.push(Date.now() - this.gameMetrics.startTime);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
    const allMatched = this.cards.every(card => card.getData('matched'));
    if (allMatched) {
      this.showWin();
    }
    
  } else {
    // ‚ùå –ù–ï –°–û–í–ü–ê–î–ï–ù–ò–ï
    console.log('No match');
    
    this.gameMetrics.errors++;
    this.mistakeCount++;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    if (this.mistakeText) {
      this.mistakeText.setText('–û—à–∏–±–æ–∫: ' + this.mistakeCount);
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ 800ms
    this.time.delayedCall(800, () => {
      if (card1 && card1.scene) {
        this.tweens.add({
          targets: card1,
          scaleX: 0,
          duration: 150,
          onComplete: () => {
            this.setCardTexture(card1, 'back');
            this.tweens.add({
              targets: card1,
              scaleX: card1.getData('scaleX') || 1,
              duration: 150,
              onComplete: () => {
                card1.setData('opened', false);
              }
            });
          }
        });
      }
      
      if (card2 && card2.scene) {
        this.tweens.add({
          targets: card2,
          scaleX: 0,
          duration: 150,
          onComplete: () => {
            this.setCardTexture(card2, 'back');
            this.tweens.add({
              targets: card2,
              scaleX: card2.getData('scaleX') || 1,
              duration: 150,
              onComplete: () => {
                card2.setData('opened', false);
              }
            });
          }
        });
      }
      
      // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
      this.opened = [];
      this._processingCards = false;
      this.canClick = true;
    });
  }
}

  // –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ï–¢–û–î: –≠–∫—Ä–∞–Ω –ø–æ–±–µ–¥—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π ProgressSyncManager
  async showWin() {
      this.clearVictoryScreen(); // ‚Üê –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Ä—ã–µ —Ñ–æ–Ω—ã
    
    this.canClick = false;
    this.gameState.gameStarted = false;
    this.gameState.showingVictory = true;
    this.stopGameTimer();
    this.cards.forEach(c => c.disableInteractive());

    const gameTime = this.currentTimeSeconds;
    const accuracy = this.gameMetrics.attempts > 0 ? 
      Math.round((1 - this.gameMetrics.errors / this.gameMetrics.attempts) * 100) : 100;

    // –û–ë–ù–û–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ProgressSyncManager
    const progressResult = await this.saveProgressViaSyncManager(
      this.currentLevelIndex, 
      gameTime, 
      this.gameMetrics.attempts, 
      this.gameMetrics.errors,
      accuracy
    );

    // –û–ë–ù–û–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    await this.checkAndUnlockAchievements(progressResult, gameTime, this.gameMetrics.errors);

    console.log('Game finished:', {
      time: gameTime,
      attempts: this.gameMetrics.attempts,
      errors: this.gameMetrics.errors,
      accuracy: accuracy,
      stars: progressResult.stars,
      improved: progressResult.improved
    });

    const { W, H } = this.getSceneWH();

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —ç–∫—Ä–∞–Ω–∞ –ø–æ–±–µ–¥—ã
    this.victoryContainer = this.add.container(0, 0);
    this.victoryContainer.setDepth(100);

    // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
const overlay = this.add.graphics();
overlay.fillStyle(0x000000, 0.9); // ‚Üê –£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–æ 0.9
overlay.fillRect(0, 0, W, H);
this.victoryContainer.add(overlay);

    // –ö—Ä–∞—Å–∏–≤–æ–µ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const panelW = Math.min(500, W * 0.9);
    const panelH = Math.min(450, H * 0.8);
    const panelX = W/2;
    const panelY = H/2;

    const panel = this.add.graphics();
    panel.fillStyle(0x2C3E50, 0.95);
    panel.lineStyle(3, 0x3498DB, 0.8);
    panel.fillRoundedRect(panelX - panelW/2, panelY - panelH/2, panelW, panelH, 20);
    panel.strokeRoundedRect(panelX - panelW/2, panelY - panelH/2, panelW, panelH, 20);
    this.victoryContainer.add(panel);

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const title = this.add.text(panelX, panelY - panelH/2 + 50, '–ü–û–ë–ï–î–ê!', {
      fontFamily: 'Arial, sans-serif', 
      fontSize: this._pxByH(0.06, 24, 42) + 'px', 
      color: '#F39C12', 
      fontStyle: 'bold'
    }).setOrigin(0.5);
    this.victoryContainer.add(title);

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–≤—ë–∑–¥–æ—á–µ–∫
    this.showStarsAnimation(panelX, panelY - panelH/2 + 100, progressResult);

    // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const statsY = panelY - panelH/2 + 160;
    const lineHeight = 30;
    
    const timeText = this.add.text(panelX, statsY, `–í—Ä–µ–º—è: ${this.formatTime(gameTime)}`, {
      fontFamily: 'Arial, sans-serif', fontSize: '18px', color: '#4ECDC4', fontStyle: 'bold'
    }).setOrigin(0.5);
    this.victoryContainer.add(timeText);

    const attemptsText = this.add.text(panelX, statsY + lineHeight, `–ü–æ–ø—ã—Ç–æ–∫: ${this.gameMetrics.attempts}`, {
      fontFamily: 'Arial, sans-serif', fontSize: '16px', color: '#E8E1C9', fontStyle: 'normal'
    }).setOrigin(0.5);
    this.victoryContainer.add(attemptsText);

    const errorsText = this.add.text(panelX, statsY + lineHeight * 2, `–û—à–∏–±–æ–∫: ${this.mistakeCount}`, {
      fontFamily: 'Arial, sans-serif', fontSize: '16px', color: '#E74C3C', fontStyle: 'normal'
    }).setOrigin(0.5);
    this.victoryContainer.add(errorsText);

    const accuracyText = this.add.text(panelX, statsY + lineHeight * 3, `–¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy}%`, {
      fontFamily: 'Arial, sans-serif', fontSize: '16px', color: '#2ECC71', fontStyle: 'normal'
    }).setOrigin(0.5);
    this.victoryContainer.add(accuracyText);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if (progressResult.improved) {
      const recordText = this.add.text(panelX, statsY + lineHeight * 4, '–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!', {
        fontFamily: 'Arial, sans-serif', fontSize: '18px', color: '#F39C12', fontStyle: 'bold'
      }).setOrigin(0.5);
      this.victoryContainer.add(recordText);
    }

    // –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if (progressResult.synced) {
      const syncText = this.add.text(panelX, statsY + lineHeight * 5, '‚òÅÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ', {
        fontFamily: 'Arial, sans-serif', fontSize: '14px', color: '#27AE60', fontStyle: 'normal'
      }).setOrigin(0.5);
      this.victoryContainer.add(syncText);
    } else if (progressResult.syncError) {
      const syncErrorText = this.add.text(panelX, statsY + lineHeight * 5, '‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', {
        fontFamily: 'Arial, sans-serif', fontSize: '14px', color: '#E74C3C', fontStyle: 'normal'
      }).setOrigin(0.5);
      this.victoryContainer.add(syncErrorText);
    }

    // –ö–Ω–æ–ø–∫–∏
    const btnY = panelY + panelH/2 - 60;
    const btnW = Math.min(160, panelW * 0.35);
    const btnH = 45;

    // –ö–Ω–æ–ø–∫–∞ "–ï—â—ë —Ä–∞–∑"
    const playAgainBtn = window.makeImageButton(
      this, panelX - btnW/2 - 10, btnY, btnW, btnH,
      '–ï—â—ë —Ä–∞–∑',
      () => this.restartLevel()
    );
    playAgainBtn.setDepth(102);

    // –ö–Ω–æ–ø–∫–∞ "–ú–µ–Ω—é"
    const menuBtn = window.makeImageButton(
      this, panelX + btnW/2 + 10, btnY, btnW, btnH,
      '–ú–µ–Ω—é',
      () => {
        this.clearVictoryScreen();
        this.gameState.gameStarted = false;
        this.scene.start('MenuScene', { page: this.levelPage });
      }
    );
    menuBtn.setDepth(102);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    this.victoryElements = [playAgainBtn, menuBtn];
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–µ—Ä–µ–∑ ProgressSyncManager
  async saveProgressViaSyncManager(levelIndex, gameTime, attempts, errors, accuracy) {
    // –†–∞—Å—á—ë—Ç –∑–≤—ë–∑–¥–æ—á–µ–∫ (1-3 –∑–≤–µ–∑–¥—ã)
    let stars = 1; // –º–∏–Ω–∏–º—É–º 1 –∑–≤–µ–∑–¥–∞ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ
    
    const errorRate = attempts > 0 ? errors / attempts : 0;
    
    if (errorRate === 0 && gameTime <= 60) stars = 3;      // –æ—Ç–ª–∏—á–Ω–æ
    else if (errorRate <= 0.2 && gameTime <= 90) stars = 2; // —Ö–æ—Ä–æ—à–æ
    
    const result = {
      stars,
      improved: false,
      synced: false,
      syncError: false,
      currentBest: null
    };

    try {
      if (this.syncManager) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º ProgressSyncManager
        const currentProgress = await this.syncManager.loadProgress();
        
        if (!currentProgress.levels) {
          currentProgress.levels = {};
        }
        
        const existingLevel = currentProgress.levels[levelIndex];
        const newLevel = {
          stars,
          bestTime: gameTime,
          bestAccuracy: accuracy,
          attempts,
          errors,
          accuracy,
          timestamp: Date.now(),
          completedAt: new Date().toISOString()
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª—É—á—à–µ –ª–∏ –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result.improved = !existingLevel || 
          stars > existingLevel.stars || 
          (stars === existingLevel.stars && gameTime < existingLevel.bestTime);
        
        if (result.improved) {
          currentProgress.levels[levelIndex] = newLevel;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          if (!currentProgress.stats) {
            currentProgress.stats = {
              gamesPlayed: 0,
              totalTime: 0,
              totalErrors: 0,
              bestTime: null,
              lastPlayed: 0,
              perfectGames: 0,
              totalStars: 0
            };
          }
          
          const stats = currentProgress.stats;
          stats.gamesPlayed++;
          stats.totalTime += gameTime;
          stats.totalErrors += errors;
          stats.lastPlayed = Date.now();
          
          if (errors === 0) {
            stats.perfectGames++;
          }
          
          if (!stats.bestTime || gameTime < stats.bestTime) {
            stats.bestTime = gameTime;
          }
          
          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
          stats.totalStars = Object.values(currentProgress.levels)
            .reduce((total, level) => total + (level.stars || 0), 0);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)
          await this.syncManager.saveProgress(currentProgress, true);
          
          result.synced = true;
          result.currentBest = newLevel;
          
          console.log('üíæ Progress saved and synced via ProgressSyncManager:', {
            level: levelIndex,
            stars,
            time: gameTime,
            improved: result.improved
          });
        } else {
          result.currentBest = existingLevel;
        }
        
      } else {
        // Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
        console.warn('ProgressSyncManager not available, using fallback');
        result = this.saveProgressFallback(levelIndex, gameTime, attempts, errors, accuracy);
      }
      
    } catch (error) {
      console.error('‚ùå Failed to save progress via sync manager:', error);
      result.syncError = true;
      
      // –ü—ã—Ç–∞–µ–º—Å—è fallback —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
      try {
        const fallbackResult = this.saveProgressFallback(levelIndex, gameTime, attempts, errors, accuracy);
        result.improved = fallbackResult.improved;
        result.currentBest = fallbackResult.currentBest;
      } catch (fallbackError) {
        console.error('‚ùå Fallback save also failed:', fallbackError);
      }
    }

    return result;
  }

  // –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: Fallback —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  saveProgressFallback(levelIndex, gameTime, attempts, errors, accuracy) {
    try {
      const progress = this.getProgressFallback();
      
      let stars = 1;
      const errorRate = attempts > 0 ? errors / attempts : 0;
      
      if (errorRate === 0 && gameTime <= 60) stars = 3;
      else if (errorRate <= 0.2 && gameTime <= 90) stars = 2;
      
      const existingLevel = progress.levels[levelIndex];
      const newLevel = {
        stars,
        bestTime: gameTime,
        bestAccuracy: accuracy,
        attempts,
        errors,
        accuracy,
        timestamp: Date.now()
      };
      
      const improved = !existingLevel || 
        stars > existingLevel.stars || 
        (stars === existingLevel.stars && gameTime < existingLevel.bestTime);
      
      if (improved) {
        progress.levels[levelIndex] = newLevel;
        localStorage.setItem('findpair_progress', JSON.stringify(progress));
        
        // –¢–∞–∫–∂–µ –ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å VK –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if (this.isVKEnvironment && window.VKHelpers) {
          window.VKHelpers.setStorageData('findpair_progress', progress)
            .catch(err => console.warn('VK sync failed:', err));
        }
      }
      
      return {
        stars,
        improved,
        synced: false,
        syncError: false,
        currentBest: progress.levels[levelIndex]
      };
      
    } catch (error) {
      console.error('‚ùå Fallback save failed:', error);
      return {
        stars: 1,
        improved: false,
        synced: false,
        syncError: true,
        currentBest: null
      };
    }
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ ProgressSyncManager
  async checkAndUnlockAchievements(progressResult, gameTime, errors) {
    try {
      if (!this.syncManager) {
        // Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
        return this.checkAchievements(gameTime, errors, this.currentLevel);
      }

      const currentProgress = await this.syncManager.loadProgress();
      
      if (!currentProgress.achievements) {
        currentProgress.achievements = {};
      }
      
      const achievements = currentProgress.achievements;
      const stats = currentProgress.stats;
      const newAchievements = [];
      
      // –ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞
      if (!achievements.first_win) {
        achievements.first_win = true;
        newAchievements.push({
          id: 'first_win',
          title: '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞!',
          description: '–í—ã–∏–≥—Ä–∞–ª–∏ –ø–µ—Ä–≤—É—é –∏–≥—Ä—É',
          icon: 'üèÜ',
          points: 10
        });
      }
      
      // –ò–¥–µ–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞
      if (errors === 0 && !achievements.perfect_game) {
        achievements.perfect_game = true;
        newAchievements.push({
          id: 'perfect_game',
          title: '–ò–¥–µ–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å!',
          description: '–ó–∞–≤–µ—Ä—à–∏–ª–∏ –∏–≥—Ä—É –±–µ–∑ –æ—à–∏–±–æ–∫',
          icon: 'üß†',
          points: 50
        });
      }
      
      // –°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –±–µ–≥—É–Ω
      if (gameTime <= 30 && !achievements.speed_runner) {
        achievements.speed_runner = true;
        newAchievements.push({
          id: 'speed_runner',
          title: '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –±–µ–≥—É–Ω!',
          description: '–ó–∞–≤–µ—Ä—à–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∑–∞ 30 —Å–µ–∫—É–Ω–¥',
          icon: '‚ö°',
          points: 30
        });
      }
      
      // –≠–∫—Å–ø–µ—Ä—Ç –ø–∞–º—è—Ç–∏ (—Å–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)
      const level = this.currentLevel;
      const totalPairs = level ? (level.cols * level.rows) / 2 : 0;
      if (totalPairs >= 12 && !achievements.expert) {
        achievements.expert = true;
        newAchievements.push({
          id: 'expert',
          title: '–≠–∫—Å–ø–µ—Ä—Ç –ø–∞–º—è—Ç–∏!',
          description: '–ü—Ä–æ—à–ª–∏ —Å–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å',
          icon: 'üéì',
          points: 75
        });
      }
      
      // –£–ø–æ—Ä—Å—Ç–≤–æ (–º–Ω–æ–≥–æ –∏–≥—Ä)
      if (stats && stats.gamesPlayed >= 10 && !achievements.persistent) {
        achievements.persistent = true;
        newAchievements.push({
          id: 'persistent',
          title: '–£–ø–æ—Ä—Å—Ç–≤–æ!',
          description: '–°—ã–≥—Ä–∞–ª–∏ 10 –∏–≥—Ä',
          icon: 'üéØ',
          points: 25
        });
      }
      
      // –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –∑–≤–µ–∑–¥
      if (stats && stats.totalStars >= 30 && !achievements.collector) {
        achievements.collector = true;
        newAchievements.push({
          id: 'collector',
          title: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä!',
          description: '–°–æ–±—Ä–∞–ª–∏ 30 –∑–≤–µ–∑–¥',
          icon: 'üìö',
          points: 40
        });
      }
      
      // –ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü (–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∏–≥—Ä–µ)
      if (stats && stats.totalTime >= 3600 && !achievements.marathoner) { // 1 —á–∞—Å
        achievements.marathoner = true;
        newAchievements.push({
          id: 'marathoner',
          title: '–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü!',
          description: '–ü—Ä–æ–≤–µ–ª–∏ –≤ –∏–≥—Ä–µ –±–æ–ª—å—à–µ —á–∞—Å–∞',
          icon: 'üèÉ',
          points: 100
        });
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      if (newAchievements.length > 0) {
        await this.syncManager.saveProgress(currentProgress, true);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
        this.showNewAchievements(newAchievements);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ VK (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        await this.shareAchievementsToVK(newAchievements);
      }
      
    } catch (error) {
      console.error('‚ùå Failed to check achievements:', error);
      // Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
      this.checkAchievements(gameTime, errors, this.currentLevel);
    }
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–∫–∞–∑ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  showNewAchievements(achievements) {
    const { W, H } = this.getSceneWH();
    
    achievements.forEach((achievement, index) => {
      setTimeout(() => {
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
        const notification = this.add.container(W / 2, 150 + index * 120);
        
        // –§–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const bg = this.add.graphics();
        bg.fillStyle(0x2C3E50, 0.95);
        bg.lineStyle(3, 0xF39C12, 1);
        bg.fillRoundedRect(-160, -40, 320, 80, 15);
        bg.strokeRoundedRect(-160, -40, 320, 80, 15);
        
        // –ò–∫–æ–Ω–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        const icon = this.add.text(-130, 0, achievement.icon, {
          fontSize: '32px'
        }).setOrigin(0.5);
        
        // –¢–µ–∫—Å—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        const title = this.add.text(-90, -10, achievement.title, {
          fontFamily: 'Arial, sans-serif',
          fontSize: '18px',
          color: '#F39C12',
          fontStyle: 'bold'
        }).setOrigin(0, 0.5);
        
        const description = this.add.text(-90, 10, achievement.description, {
          fontFamily: 'Arial, sans-serif',
          fontSize: '14px',
          color: '#FFFFFF'
        }).setOrigin(0, 0.5);
        
        // –û—á–∫–∏
        const points = this.add.text(140, 0, `+${achievement.points}`, {
          fontFamily: 'Arial, sans-serif',
          fontSize: '16px',
          color: '#27AE60',
          fontStyle: 'bold'
        }).setOrigin(1, 0.5);
        
        notification.add([bg, icon, title, description, points]);
        notification.setDepth(1000);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        notification.setAlpha(0);
        notification.setScale(0.8);
        
        this.tweens.add({
          targets: notification,
          alpha: 1,
          scaleX: 1,
          scaleY: 1,
          duration: 500,
          ease: 'Back.easeOut'
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          this.tweens.add({
            targets: notification,
            alpha: 0,
            scaleX: 0.8,
            scaleY: 0.8,
            duration: 300,
            ease: 'Power2.easeIn',
            onComplete: () => {
              notification.destroy();
            }
          });
        }, 4000);
        
      }, index * 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
    });
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –®–∞—Ä–∏–Ω–≥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤–æ VK
  async shareAchievementsToVK(achievements) {
    try {
      if (!window.VKHelpers || !window.VK_BRIDGE_READY) {
        return;
      }
      
      for (const achievement of achievements) {
        // –î–µ–ª–∏–º—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º –≤–æ VK
        try {
          await window.VKHelpers.shareResult(
            `üèÜ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${achievement.title}"!\n${achievement.description}\n\n#–ò–≥—Ä–∞–ü–∞–º—è—Ç—å #FindThePair`,
            this.currentLevelIndex
          );
          
          console.log('‚úÖ Achievement shared to VK:', achievement.title);
          
        } catch (error) {
          console.log('VK sharing cancelled or not available');
        }
      }
      
    } catch (error) {
      console.error('‚ùå Failed to share achievements:', error);
    }
  }

  // –ê–Ω–∏–º–∞—Ü–∏—è –∑–≤—ë–∑–¥–æ—á–µ–∫
  showStarsAnimation(x, y, progressResult) {
    const { stars, improved } = progressResult;
    const starSize = 40;
    const starSpacing = 60;
    
    for (let i = 1; i <= 3; i++) {
      const starX = x + (i - 2) * starSpacing;
      const filled = i <= stars;
      const star = this.add.text(starX, y, filled ? '‚òÖ' : '‚òÜ', {
        fontSize: `${starSize}px`,
        color: filled ? '#FFD700' : '#666666'
      }).setOrigin(0.5)
        .setDepth(102); // ‚Üê –î–û–ë–ê–í–ò–¢–¨ depth
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (this.victoryContainer) {
        this.victoryContainer.add(star);
      }
      
      if (filled && improved) {
        // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∑–≤—ë–∑–¥–æ—á–µ–∫
        star.setScale(0);
        this.tweens.add({
          targets: star,
          scale: 1.3,
          duration: 400,
          delay: i * 200,
          ease: 'Back.easeOut',
          yoyo: true,
          repeat: 0,
          onComplete: () => {
            star.setScale(1);
            // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–µ—Å–∫
            this.createStarSparkle(starX, y);
          }
        });
      }
    }
    
    // –¢–µ–∫—Å—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–≤—ë–∑–¥
    const starsText = `${stars}/3 ‚≠ê`;
    const starsLabel = this.add.text(x, y + 50, starsText, {
      fontFamily: 'Arial, sans-serif',
      fontSize: '18px',
      color: '#F39C12',
      fontStyle: 'bold'
    }).setOrigin(0.5)
      .setDepth(102); // ‚Üê –î–û–ë–ê–í–ò–¢–¨ depth
    
    if (this.victoryContainer) {
      this.victoryContainer.add(starsLabel);
    }
  }

  // –≠—Ñ—Ñ–µ–∫—Ç –±–ª–µ—Å–∫–∞ –∑–≤—ë–∑–¥
  createStarSparkle(x, y) {
    const sparkles = ['‚ú®', '‚≠ê', 'üí´'];
    
    for (let i = 0; i < 3; i++) {
      const sparkle = this.add.text(x, y, sparkles[i % sparkles.length], {
        fontSize: '16px'
      }).setOrigin(0.5).setDepth(103);
      
      const angle = (i / 3) * Math.PI * 2;
      const distance = 30;
      
      this.tweens.add({
        targets: sparkle,
        x: x + Math.cos(angle) * distance,
        y: y + Math.sin(angle) * distance,
        alpha: 0,
        scale: 1.5,
        duration: 600,
        ease: 'Power2',
        onComplete: () => sparkle.destroy()
      });
    }
  }

  // –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É—Ä–æ–≤–Ω—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π
  restartLevel() {
    console.log('Restarting level...');

     // ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –ü–û–õ–ù–£–Æ –û–ß–ò–°–¢–ö–£:
  this.cleanup();
    
    // –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
    this.clearVictoryScreen();
    
    this.gameState.gameStarted = false;
    this.gameState.deck = null; // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–ª–æ–¥—É –¥–ª—è –Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    this.gameState.cardWidth = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    this.gameState.cardHeight = null;
    this.gameSeed = this.generateSeed(); // –ù–æ–≤—ã–π seed
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    this.time.delayedCall(100, () => {
      this.startGame(this.currentLevel);
    });
  }

  // –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (fallback)
  async checkAchievements(gameTime, errors, level) {
    let newAchievements = [];
    
    // –ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞
    if (!this.achievements.first_win) {
      this.achievements.first_win = true;
      newAchievements.push({
        id: 'first_win',
        title: '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞!',
        description: '–ù–∞–π–¥–∏—Ç–µ –≤—Å–µ –ø–∞—Ä—ã –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑'
      });
    }
    
    // –ò–¥–µ–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ (–±–µ–∑ –æ—à–∏–±–æ–∫)
    if (errors === 0 && !this.achievements.perfect_game) {
      this.achievements.perfect_game = true;
      newAchievements.push({
        id: 'perfect_game',
        title: '–ò–¥–µ–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞!',
        description: '–ü—Ä–æ–π–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –±–µ–∑ –æ—à–∏–±–æ–∫'
      });
    }
    
    // –°–∫–æ—Ä–æ—Å—Ç–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ
    if (gameTime < 30 && !this.achievements.speed_runner) {
      this.achievements.speed_runner = true;
      newAchievements.push({
        id: 'speed_runner',
        title: '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –±–µ–≥—É–Ω!',
        description: '–ü—Ä–æ–π–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–∞ 30 —Å–µ–∫—É–Ω–¥'
      });
    }
    
    // –≠–∫—Å–ø–µ—Ä—Ç (—Å–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)
    const totalPairs = level.cols * level.rows / 2;
    if (totalPairs >= 9 && !this.achievements.expert) {
      this.achievements.expert = true;
      newAchievements.push({
        id: 'expert',
        title: '–≠–∫—Å–ø–µ—Ä—Ç –ø–∞–º—è—Ç–∏!',
        description: '–ü—Ä–æ–π–¥–∏—Ç–µ —Å–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å'
      });
    }
    
    
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (newAchievements.length > 0) {
      await this.saveAchievements();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
      this.showAchievements(newAchievements);
    }
  }

  // –°–¢–ê–†–´–ô –ú–ï–¢–û–î: –ü–æ–∫–∞–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (fallback)
  showAchievements(achievements) {
    const { W, H } = this.getSceneWH();
    
    achievements.forEach((achievement, index) => {
      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
      const bgWidth = 320;
      const bgHeight = 80;
      const x = W / 2;
      const y = 100 + index * 100;
      
      // –§–æ–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const achievementBg = this.add.graphics().setDepth(200);
      achievementBg.fillStyle(0x2C3E50, 0.95);
      achievementBg.lineStyle(3, 0xF39C12, 0.8);
      achievementBg.fillRoundedRect(x - bgWidth/2, y - bgHeight/2, bgWidth, bgHeight, 10);
      achievementBg.strokeRoundedRect(x - bgWidth/2, y - bgHeight/2, bgWidth, bgHeight, 10);
      
      // –ò–∫–æ–Ω–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const achievementIcon = this.add.text(x - bgWidth/2 + 25, y, 'üèÜ', {
        fontSize: '32px'
      }).setOrigin(0.5).setDepth(201);
      
      // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const achievementTitle = this.add.text(x - bgWidth/2 + 60, y - 10, achievement.title, {
        fontFamily: 'Arial, sans-serif',
        fontSize: '18px',
        color: '#F39C12',
        fontStyle: 'bold'
      }).setOrigin(0, 0.5).setDepth(201);
      
      // –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const achievementDesc = this.add.text(x - bgWidth/2 + 60, y + 15, achievement.description, {
        fontFamily: 'Arial, sans-serif',
        fontSize: '14px',
        color: '#E8E1C9',
        fontStyle: 'normal'
      }).setOrigin(0, 0.5).setDepth(201);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
      const achievementGroup = this.add.container(0, 0, [
        achievementBg, achievementIcon, achievementTitle, achievementDesc
      ]);
      
      // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
      achievementGroup.setAlpha(0);
      achievementGroup.setScale(0.8);
      
      this.tweens.add({
        targets: achievementGroup,
        alpha: 1,
        scale: 1,
        duration: 500,
        delay: index * 300,
        ease: 'Back.easeOut'
      });

      // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
      this.time.delayedCall(4000 + index * 300, () => {
        this.tweens.add({
          targets: achievementGroup,
          alpha: 0,
          scale: 0.8,
          duration: 300,
          onComplete: () => {
            achievementGroup.destroy();
          }
        });
      });
    });
  }

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  ensureGradientBackground() {
    const { W, H } = this.getSceneWH();

    if (this.textures.exists('bg_game')) {
      this.bgImage && this.bgImage.destroy();
      const img = this.add.image(W/2, H/2, 'bg_game').setOrigin(0.5).setDepth(-1000);
      const src = this.textures.get('bg_game').getSourceImage();
      const scale = Math.max(W / src.width, H / src.height);
      img.setDisplaySize(src.width * scale, src.height * scale);
      this.bgImage = img;
      return;
    }

    const key = 'bg-grad-game';
    const DPR = this.getDPR();
    if (this.textures.exists(key)) {
      const src = this.textures.get(key).getSourceImage();
      if (src.width !== Math.round(W*DPR) || src.height !== Math.round(H*DPR)) this.textures.remove(key);
    }
    if (!this.textures.exists(key)) {
      const tex = this.textures.createCanvas(key, Math.max(2, Math.round(W*DPR)), Math.max(2, Math.round(H*DPR)));
      const ctx = tex.getContext(); ctx.save(); ctx.scale(DPR, DPR);
      const g = ctx.createLinearGradient(0,0,0,H);
      g.addColorStop(0, window.THEME.bgTop); g.addColorStop(0.6, window.THEME.bgMid); g.addColorStop(1, window.THEME.bgBottom);
      ctx.fillStyle = g; ctx.fillRect(0,0,W,H);
      ctx.restore(); tex.refresh();
    }
    this.bgImage && this.bgImage.destroy();
    this.bgImage = this.add.image(0,0,key).setOrigin(0,0).setDepth(-1000).setDisplaySize(W,H);
  }

  makePlaceholdersIfNeeded() {
    if (this.textures.exists('back')) return;
    
    const tex = this.textures.createCanvas('back', 120, 160);
    const ctx = tex.getContext();
    ctx.fillStyle = '#2C3E50';
    ctx.fillRect(0, 0, 120, 160);
    ctx.strokeStyle = '#34495E';
    ctx.lineWidth = 2;
    ctx.strokeRect(1, 1, 118, 158);
    ctx.fillStyle = '#ECF0F1';
    ctx.font = '16px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('?', 60, 85);
    tex.refresh();
    
    window.ALL_CARD_KEYS.forEach(key => {
      if (!this.textures.exists(key)) {
        const cardTex = this.textures.createCanvas(key, 120, 160);
        const cardCtx = cardTex.getContext();
        cardCtx.fillStyle = '#E74C3C';
        cardCtx.fillRect(0, 0, 120, 160);
        cardCtx.fillStyle = '#FFFFFF';
        cardCtx.font = 'bold 20px Arial';
        cardCtx.textAlign = 'center';
        cardCtx.fillText(key.toUpperCase(), 60, 85);
        cardTex.refresh();
      }
    });
  }
};
