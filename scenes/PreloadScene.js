//---scenes/PreloadScene.js - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å VK –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π

window.PreloadScene = class PreloadScene extends Phaser.Scene {
  constructor(){ super('PreloadScene'); }

  init() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK –¥–∞–Ω–Ω—ã—Ö
    this.vkUserData = window.VK_USER_DATA || null;
    this.vkLaunchParams = window.VK_LAUNCH_PARAMS || null;
    this.isVKEnvironment = !!this.vkLaunchParams;
    
    console.log('üéÆ PreloadScene init:', {
      isVK: this.isVKEnvironment,
      userData: !!this.vkUserData,
      params: this.vkLaunchParams
    });
  }

  preload() {
    const { width, height } = this.scale;
    
    // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω
    this.createLoadingScreen(width, height);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    this.setupLoadingHandlers();
    
    // –ï–¥–∏–Ω—ã–π –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –∞—Å—Å–µ—Ç–æ–≤
    this.load.setPath('assets/');

    // –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Å—Å–µ—Ç—ã –∏–≥—Ä—ã
    this.loadGameAssets();
    
    // VK —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∞—Å—Å–µ—Ç—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if (this.isVKEnvironment) {
      this.loadVKAssets();
    }
  }

  createLoadingScreen(width, height) {
    // –§–æ–Ω
    const bg = this.add.graphics();
    bg.fillStyle(0x1d2330);
    bg.fillRect(0, 0, width, height);

    // –õ–æ–≥–æ—Ç–∏–ø/–∑–∞–≥–æ–ª–æ–≤–æ–∫
    this.titleText = this.add.text(width/2, height/2 - 100, 'Find the Pair', {
      fontFamily: 'Arial, sans-serif',
      fontSize: '48px',
      color: '#4ECDC4',
      fontStyle: 'bold'
    }).setOrigin(0.5);

    // –û–ø–∏—Å–∞–Ω–∏–µ
    this.subtitleText = this.add.text(width/2, height/2 - 50, '–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ –ø–∞–º—è—Ç—å —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏', {
      fontFamily: 'Arial, sans-serif',
      fontSize: '18px',
      color: '#E8E1C9'
    }).setOrigin(0.5);

    // VK –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    if (this.vkUserData) {
      const userName = this.vkUserData.first_name || '–ò–≥—Ä–æ–∫';
      this.welcomeText = this.add.text(width/2, height/2 - 20, `–ü—Ä–∏–≤–µ—Ç, ${userName}! üëã`, {
        fontFamily: 'Arial, sans-serif',
        fontSize: '16px',
        color: '#F39C12'
      }).setOrigin(0.5);
    }

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    const progressBoxWidth = 320;
    const progressBoxHeight = 50;
    const progressBoxX = width/2 - progressBoxWidth/2;
    const progressBoxY = height/2 + 50;

    // –§–æ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    this.progressBox = this.add.graphics();
    this.progressBox.fillStyle(0x222222, 0.8);
    this.progressBox.fillRoundedRect(progressBoxX, progressBoxY, progressBoxWidth, progressBoxHeight, 10);
    
    // –†–∞–º–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    this.progressBox.lineStyle(2, 0x4ECDC4, 0.8);
    this.progressBox.strokeRoundedRect(progressBoxX, progressBoxY, progressBoxWidth, progressBoxHeight, 10);

    // –°–∞–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    this.progressBar = this.add.graphics();

    // –¢–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    this.progressText = this.add.text(width/2, progressBoxY + progressBoxHeight/2, '0%', {
      fontFamily: 'Arial, sans-serif',
      fontSize: '16px',
      color: '#FFFFFF',
      fontStyle: 'bold'
    }).setOrigin(0.5);

    // –¢–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
    this.loadingText = this.add.text(width/2, progressBoxY + progressBoxHeight + 30, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...', {
      fontFamily: 'Arial, sans-serif',
      fontSize: '14px',
      color: '#95A5A6'
    }).setOrigin(0.5);

    // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    this.tweens.add({
      targets: this.titleText,
      scaleX: 1.05,
      scaleY: 1.05,
      duration: 2000,
      yoyo: true,
      repeat: -1,
      ease: 'Sine.easeInOut'
    });
  }

  setupLoadingHandlers() {
    const { width, height } = this.scale;
    const progressBoxWidth = 300;
    const progressBoxX = width/2 - 160;
    const progressBoxY = height/2 + 50;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    this.load.on('progress', (value) => {
      this.progressBar.clear();
      this.progressBar.fillStyle(0x4ECDC4);
      this.progressBar.fillRoundedRect(
        progressBoxX + 10, 
        progressBoxY + 10, 
        progressBoxWidth * value, 
        30, 
        5
      );
      
      const percentage = Math.round(value * 100);
      this.progressText.setText(`${percentage}%`);
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    this.load.on('fileprogress', (file) => {
      this.loadingText.setText(`–ó–∞–≥—Ä—É–∑–∫–∞: ${file.key}`);
    });

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    this.load.on('complete', () => {
      this.loadingText.setText('–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
      this.time.delayedCall(500, () => {
        this.startNextScene();
      });
    });

    // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    this.load.on('fileerror', (file) => {
      console.error('‚ùå File load error:', file.key);
      this.loadingText.setText(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${file.key}`);
      this.loadingText.setColor('#E74C3C');
    });
  }

  loadGameAssets() {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –∞—Å—Å–µ—Ç—ã
    this.load.image('back', 'back_card02.png');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã
    window.ALL_CARD_KEYS.forEach(key => {
      this.load.image(key, `cards/${key}.png`);
    });

    // UI —ç–ª–µ–º–µ–Ω—Ç—ã
    this.load.image('button01', 'button01.png');

    // –§–æ–Ω—ã
    this.load.image('bg_menu', 'bg_menu.png');
    this.load.image('bg_game', 'bg_game.png');

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Å—Å–µ—Ç—ã
    this.load.image('star', 'star.png');
    this.load.image('trophy', 'trophy.png');

    // –ó–≤—É–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (this.load.audioDecodeByList) {
      this.load.audio('card_flip', ['sounds/card_flip.mp3', 'sounds/card_flip.wav']);
      this.load.audio('match_sound', ['sounds/match.mp3', 'sounds/match.wav']);
      this.load.audio('win_sound', ['sounds/win.mp3', 'sounds/win.wav']);
    }
  }

  loadVKAssets() {
    console.log('üì¶ Loading VK-specific assets...');
    
    // VK —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∞—Å—Å–µ—Ç—ã (–∏–∫–æ–Ω–∫–∏, —Ç–µ–º—ã –∏ —Ç.–¥.)
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (this.vkUserData && this.vkUserData.photo_100) {
      this.load.image('user_avatar', this.vkUserData.photo_100);
    }
  }

  startNextScene() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    if (this.isVKEnvironment) {
      this.initVKAchievements();
    }

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ–Ω—é
    this.scene.start('MenuScene', { 
      page: 0,
      userData: this.vkUserData,
      isVK: this.isVKEnvironment
    });
  }

  initVKAchievements() {
    try {
      // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä VK –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      // ProgressSyncManager —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ –≤ main.js
      if (!window.VKAchievementManager) {
        window.VKAchievementManager = new VKAchievementManager(this.vkUserData);
      }
      console.log('üèÜ VK Achievement Manager initialized');
    } catch (error) {
      console.warn('‚ö†Ô∏è VK Achievement Manager init failed:', error);
    }
  }

  create() {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ preload
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  }
};

// VK Achievement Manager - —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è VK
class VKAchievementManager {
  constructor(userData) {
    this.userData = userData;
    this.achievements = this.loadAchievements();
    this.isVKEnvironment = !!window.VK_LAUNCH_PARAMS;

    // –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ProgressSyncManager
      this.initSyncManager();
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π VK
    this.vkAchievements = {
      first_win: {
        title: '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞',
        description: '–ù–∞–π–¥–∏—Ç–µ –≤—Å–µ –ø–∞—Ä—ã –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑',
        icon: 'trophy',
        points: 100
      },
      perfect_game: {
        title: '–ò–¥–µ–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞',
        description: '–ü—Ä–æ–π–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –±–µ–∑ –æ—à–∏–±–æ–∫',
        icon: 'star',
        points: 200
      },
      speed_runner: {
        title: '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –±–µ–≥—É–Ω',
        description: '–ü—Ä–æ–π–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–∞ 30 —Å–µ–∫—É–Ω–¥',
        icon: 'lightning',
        points: 300
      },
      persistent: {
        title: '–£–ø–æ—Ä—Å—Ç–≤–æ',
        description: '–°—ã–≥—Ä–∞–π—Ç–µ 10 –∏–≥—Ä –ø–æ–¥—Ä—è–¥',
        icon: 'medal',
        points: 150
      },
      expert: {
        title: '–≠–∫—Å–ø–µ—Ä—Ç –ø–∞–º—è—Ç–∏',
        description: '–ü—Ä–æ–π–¥–∏—Ç–µ —Å–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å',
        icon: 'crown',
        points: 250
      }
    };
  }

  loadAchievements() {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ VK Storage, –ø–æ—Ç–æ–º –∏–∑ localStorage
    if (this.isVKEnvironment && window.vkBridge) {
      return this.loadFromVKStorage();
    }
    
    const saved = localStorage.getItem('findpair_achievements');
    return saved ? JSON.parse(saved) : this.getDefaultAchievements();
  }

  async loadFromVKStorage() {
    try {
      const result = await window.vkBridge.send('VKWebAppStorageGet', {
        keys: ['achievements']
      });
      
      if (result.keys && result.keys.length > 0) {
        const achievementsData = result.keys[0].value;
        return achievementsData ? JSON.parse(achievementsData) : this.getDefaultAchievements();
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Failed to load achievements from VK Storage:', error);
    }
    
    return this.getDefaultAchievements();
  }

  getDefaultAchievements() {
    return {
      first_win: false,
      perfect_game: false,
      speed_runner: false,
      persistent: false,
      expert: false
    };
  }


   async initSyncManager() {
    try {
            // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–†
      this.syncManager = window.progressSyncManager || new ProgressSyncManager();
      
      if (!window.progressSyncManager) {
        window.progressSyncManager = this.syncManager;
        await this.syncManager.init();
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const progressData = await this.syncManager.loadProgress();
      if (progressData && progressData.achievements) {
        this.achievements = { ...progressData.achievements };
      }
      
      console.log('üéØ Achievement sync manager initialized');
      
    } catch (error) {
      console.error('‚ùå Failed to init sync manager:', error);
      // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
      this.achievements = this.loadAchievements();
    }
  }

  

  async saveAchievements() {
    try {
      if (this.syncManager) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä
        const currentProgress = await this.syncManager.loadProgress();
        currentProgress.achievements = { ...this.achievements };
        await this.syncManager.saveProgress(currentProgress, true);
      } else {
        // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
        if (this.isVKEnvironment && window.vkBridge) {
          await window.vkBridge.send('VKWebAppStorageSet', {
            key: 'achievements',
            value: JSON.stringify(this.achievements)
          });
        }
        localStorage.setItem('findpair_achievements', JSON.stringify(this.achievements));
      }
      
      console.log('‚úÖ Achievements saved via sync manager');
      
    } catch (error) {
      console.error('‚ùå Failed to save achievements:', error);
      throw error;
    }
  }

  async unlockAchievement(achievementId) {
    if (this.achievements[achievementId]) {
      return false; // –£–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
    }

    this.achievements[achievementId] = true;
    await this.saveAchievements();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤–æ VK (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
    if (this.isVKEnvironment && window.vkBridge) {
      try {
        await this.sendVKAchievement(achievementId);
      } catch (error) {
        console.warn('‚ö†Ô∏è Failed to send VK achievement:', error);
      }
    }

    return true;
  }

  async sendVKAchievement(achievementId) {
    const achievement = this.vkAchievements[achievementId];
    if (!achievement) return;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ VK
    try {
      await window.vkBridge.send('VKWebAppAddToCommunity');
      
      // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–∞ —Å—Ç–µ–Ω—É (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
      await window.vkBridge.send('VKWebAppShowWallPostBox', {
        message: `üèÜ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${achievement.title}"!\n${achievement.description}\n\n#FindThePair #–ò–≥—Ä–∞–ü–∞–º—è—Ç—å`,
        attachments: window.location.href
      });
    } catch (error) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∏–ª–∏ –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      console.log('VK sharing cancelled or not permitted');
    }
  }

  getAchievementProgress() {
    const total = Object.keys(this.vkAchievements).length;
    const unlocked = Object.values(this.achievements).filter(Boolean).length;
    return { unlocked, total, percentage: Math.round((unlocked / total) * 100) };
  }

  getTotalPoints() {
    return Object.entries(this.achievements)
      .filter(([_, unlocked]) => unlocked)
      .reduce((total, [id, _]) => {
        return total + (this.vkAchievements[id]?.points || 0);
      }, 0);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å—Ü–µ–Ω–∞—Ö
window.VKAchievementManager = VKAchievementManager;
